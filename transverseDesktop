'-----	Nom : 					001_FonctionsTransverses			----------------'
'----- Description :			Ce fichier  contient la listes des fonctions transverses Ã  l'application Amplitude V11/10
'----- Date de crÃ©ation  :		27/12/2019
'----- Date de MAJ  :			11/03/2019


'		****** Nom fonction  :		AccesAuProgramme	V11 -------------------------------------------------------------------------------------------
'		****** Description :		Cette fonction permet d'accÃ©der au programme d'amplitude V11 en prenant en paramÃ©tre le libellÃ© du programme Ã  ouvrir	
'		****** ParamÃ¨tres d'entrÃ©e :		LibellÃ© du programme Ã  lancer	
'		****** ParamÃ¨tre de sortie :		N/A (ouverture du programme)	
'		****** Date de crÃ©ation  : 27/12/2019			
'		****** Date de MAJ  : 29/01/2020			
'		****** Description MAJ :			


Dim touchs,veriflib

Public Function AccesAuProgrammeV11 (ls_libelle_Str)
	Window("Menu_Princ_Fen_V11").Activate
	'Wait 1
	Window("Menu_Princ_Fen_V11").Maximize
	'Wait 1
	Window("Menu_Princ_Fen_V11").Click 379, 652, micRightBtn
	'Window("Menu_Princ_Fen_V11").Click 379, 52, micRightBtn
	Wait 1
	Window("Menu_Princ_Fen_V11").Type  micUp
	'Wait 1
	Window("Menu_Princ_Fen_V11").Type  micReturn 
	Window("Recherche_Fen").Type ls_libelle_Str 
	Window("Recherche_Fen").Type micTab
	'corrige faux negatif
	Window("Recherche_Fen").Type " "
	wait 0.5
	'Window("Recherche_Fen").Type " "
	'fin faux negatif
'	'Wait 1
'	Window("Recherche_Fen").Type (" ")
'	
	Window("Recherche_Fen").Type micTab
	
	Window("Recherche_Fen").Type micTab
	Wait 1
	Reporter.ReportEvent micPass, "Ouverture du programme : " & ls_libelle_Str, "Programme  : " & ls_libelle_Str & " ouvert "
	Wait 1
	Window("Menu_Princ_Fen_V11").Type  micReturn
	
	If Environment.Value("filiale_programme")="SGM" or Environment.Value("filiale_programme")="SGBF"    or Environment.Value("filiale_programme")="SGC"  or Environment.Value("filiale_programme")="SGT" or Environment.Value("filiale_programme")="SGSN"   Then
			    
			    Window("Menu_Princ_Fen_V11").Type  micDwn
			    
	End If
	
		
End Function





Public Function AccesAuProgrammeV12 (ls_libelle_Str, programme)
	Window("Menu_Princ_Fen_V11").Activate
	'Wait 1
	Window("Menu_Princ_Fen_V11").Maximize
	'Wait 1
	'	Window("Menu_Princ_Fen_V11").Click 379, 652, micRightBtn
	Window("Menu_Princ_Fen_V11").Click 551, 155, micRightBtn
	Wait 1
	Window("Menu_Princ_Fen_V11").Type  micUp
	'Wait 1
	Window("Menu_Princ_Fen_V11").Type  micReturn 
       Window("Recherche_Fen").Type trim(ls_libelle_Str)
	Window("Recherche_Fen").Type micTab
'	'Wait 1
'	Window("Recherche_Fen").Type (" ")
'	
	Window("Recherche_Fen").Type micTab
	
	Window("Recherche_Fen").Type micTab
	Wait 1
	Reporter.ReportEvent micPass, "Ouverture du programme : " & ls_libelle_Str, "Programme  : " & ls_libelle_Str & " ouvert "
	Wait 1
	Window("Menu_Princ_Fen_V11").Type  micReturn
	
	WAIT 1
	If Environment.Value("filiale_programme")="SGM" or Environment.Value("filiale_programme")="SGBF" or Environment.Value("filiale_programme")="SGC" or Environment.Value("filiale_programme")="SGT" or Environment.Value("filiale_programme")="SGSN" Then
				
				If Environment.Value("filiale_programme")="SGSN" Then
					Window("Menu_Princ_Fen_V11").Type  micDwn
				Else 
					Window("Menu_Princ_Fen_V11").Type  micDwn
					wait 1
					Window("Menu_Princ_Fen_V11").Type  micDwn
				End If
								
	End If
	
''''	wait 3
''''	VerifExist = InStr(Window("Menu_Princ_Fen_V11").GetVisibleText, "Not found.")	
''''	If (VerifExist <> "0") Then
''''		Window("Find").InsightObject("BtnCancel").Click
''''		wait 1
''''		strRProgram = AccesAuProgrammeV12_ParMenu(programme)
''''		If strRProgram <> programme Then
''''			Reporter.ReportEvent micFail, "Execution KO", programme &" Programme pas dans le menu"
''''			Wait 1
''''			EndTest micPass, "Test KO ", "KO" 
''''		End If
''''		
''''	End If
	
	
	
End Function

'-------------------------------------------------------------------------------------
'------------------  FONCTION POUR OUVRIR UN PROGRAMME PAR LE MENU  ------------------
'-------------------------------------------------------------------------------------

Public Function AccesAuProgrammeV12_ParMenu (position)
	
			
	'MENU FONCTION TRANSACTION
	prog1 = Array(micDwn,micRight,micReturn)
	prog2 = Array(micDwn,micRight,micDwn,micReturn)
	prog3 = Array(micDwn,micRight,micDwn,micDwn,micReturn)
	prog4 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micReturn)
	prog5 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog6 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog7 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog8 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog9 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog10 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	
	'MENU FONCTION TRANSACTION CHEQUES
	prog11 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micReturn)
	prog12 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micReturn)
	prog13 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micReturn)
	prog14 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micReturn)
	prog15 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog16 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog17 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog18 = Array(micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	
	'FONCTION - FORCAGE
	prog19 = Array(micDwn,micDwn,micRight,micReturn)
	prog20 = Array(micDwn,micDwn,micRight,micDwn,micReturn)
	prog21 = Array(micDwn,micDwn,micRight,micDwn,micDwn,micReturn)
	
	'FONCTION - GESTIONS
	prog22 = Array(micDwn,micDwn,micDwn,micRight,micReturn)
	prog23 = Array(micDwn,micDwn,micDwn,micRight,micDwn,micReturn)
	prog24 = Array(micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micReturn)
	prog25 = Array(micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micReturn)
	prog26 = Array(micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micReturn)
	
	'FONCTION - CONSULTATIONS
	prog27 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micReturn)
	prog28 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micReturn)
	prog29 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micReturn)
	prog30 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micReturn)
	prog31 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog32 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog33 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog34 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog35 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog36 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog37 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	prog38 = Array(micDwn,micDwn,micDwn,micDwn,micRight,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micDwn,micReturn)
	
	Window("Menu_Princ_Fen_V11").Activate
	Window("Menu_Princ_Fen_V11").Maximize
	
	'COMPARER LE NOM DU PROGRAM RECU PAR LA LISTE DES PROGRAMMES DANS LA MATRIX
	
			
			Window("Menu_Princ_Fen_V11").InsightObject("Fonctions").Click
			Wait 1
				
			Select Case strProgram

			Case 1
				For i = 0 To UBound(prog1)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog1(i)
				Next
				
			Case 2
				For i = 0 To UBound(prog2)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog2(i)
				Next
				
			Case 3
				For i = 0 To UBound(prog3)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog3(i)
				Next
				
			Case 4
				For i = 0 To UBound(prog4)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog4(i)
				Next
				
			Case 5
				For i = 0 To UBound(prog5)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog5(i)
				Next
				
			Case 6
				For i = 0 To UBound(prog6)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog6(i)
				Next
				
			Case 7
				For i = 0 To UBound(prog7)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog7(i)
				Next
				
			Case 8
				For i = 0 To UBound(prog8)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog8(i)
				Next
				
			Case 9
				For i = 0 To UBound(prog9)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog9(i)
				Next
			
			Case 10
				For i = 0 To UBound(prog10)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog10(i)
				Next
				
			'MENU FONCTION TRANSACTION CHEQUES
			Case 11
				For i = 0 To UBound(prog11)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog11(i)
				Next
				
			Case 12
				For i = 0 To UBound(prog12)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog12(i)
				Next
				
			Case 13
				For i = 0 To UBound(prog13)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog13(i)
				Next
				
			Case 14
				For i = 0 To UBound(prog14)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog14(i)
				Next
				
			Case 15
				For i = 0 To UBound(prog15)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog15(i)
				Next
				
			Case 16
				For i = 0 To UBound(prog16)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog16(i)
				Next
				
			Case 17
				For i = 0 To UBound(prog17)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog17(i)
				Next
				
			Case 18
				For i = 0 To UBound(prog18)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog18(i)
				Next
				
			'FONCTION - FORCAGE
			Case 19
				For i = 0 To UBound(prog19)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog19(i)
				Next
				
			Case 20
				For i = 0 To UBound(prog20)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog20(i)
				Next
				
			Case 21
				For i = 0 To UBound(prog21)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog21(i)
				Next
				
			'FONCTION - GESTIONS
			Case 22
				For i = 0 To UBound(prog22)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog22(i)
				Next
				
			Case 23
				For i = 0 To UBound(prog23)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog23(i)
				Next
				
			Case 24
				For i = 0 To UBound(prog24)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog24(i)
				Next
				
			Case 25
				For i = 0 To UBound(prog25)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog25(i)
				Next
				
			Case 26
				For i = 0 To UBound(prog26)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog26(i)
				Next
				
			'FONCTION - CONSULTATIONS
			Case 27
				For i = 0 To UBound(prog27)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog27(i)
				Next
				
			Case 28
			
				For i = 0 To UBound(prog28)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog28(i)
				Next
				
			Case 29
				For i = 0 To UBound(prog29)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog29(i)
				Next
				
			Case 30
				For i = 0 To UBound(prog30)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog30(i)
				Next
				
			Case 31
				For i = 0 To UBound(prog31)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog31(i)
				Next
				
			Case 32
				For i = 0 To UBound(prog32)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog32(i)
				Next
				
			Case 33
				For i = 0 To UBound(prog33)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog33(i)
				Next
				
			Case 34
				For i = 0 To UBound(prog34)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog35(i)
				Next
				
			Case 35
				For i = 0 To UBound(prog35)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog35(i)
				Next
				
			Case 36
				For i = 0 To UBound(prog36)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog36(i)
				Next
				
			Case 37
				For i = 0 To UBound(prog37)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog37(i)
				Next
				
			Case 38
				For i = 0 To UBound(prog38)
					Wait 1
					Window("Menu_Princ_Fen_V11").Type prog38(i)
				Next
			
			End Select
	
	
End Function

'----------------------------------------------------------------------------------------------------------------------------------------------------
Public Function accesAuProgrammePrincipalFilialeV2_C ()
   Tuer_programme_ouvert
	Dim Ligne
    Ligne = ChoixDeLaLigneV2
    TabLigne = split(Ligne,"|")

    filiale = TabLigne(0)
    version = TabLigne(1)
    chemin = TabLigne(2)
'MsgBox menu
	
	If version = "V10" Then
		If filiale = "" Then
			AccesAuProgrammeV10  chemin
			'MsgBox filiale
		Else
			AccesAuProgrammeV10Filiale  chemin, filiale
			'MsgBox filiale
		End If
		
	Else
		If version = "V11" Then
			AccesAuProgrammeV11_C chemin
			'MsgBox filiale
		Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃ©der au menu demandÃ©"
		End If
	End If
End Function

'---------------------------------------------------------------------------------------------------------------------------------------------------
Public Function AccesAuProgrammeV11_C (ls_libelle_Str)

Set WshShell = CreateObject("WScript.Shell")
Set objHTML = CreateObject("htmlfile")
objHTML.ParentWindow.ClipboardData.ClearData()

   Dim pos1,pos2
    pos1 = 217
    pos2 = 79
	Window("Menu_Princ_Fen_V11").Activate
	'Wait 1
	Window("Menu_Princ_Fen_V11").Maximize
	'Wait 1
'deja bon 	
	Do 
			 Window("Menu_Princ_Fen_V11").Click pos1, pos2, micRightBtn
			Wait 1
			Window("Menu_Princ_Fen_V11").Type  micUp
			'Wait 1
			Window("Menu_Princ_Fen_V11").Type  micReturn 
			Window("Recherche_Fen").Type ls_libelle_Str 
			Window("Recherche_Fen").Type micTab	
			Window("Recherche_Fen").Type micTab
			Window("Recherche_Fen").Type micTab
			wait 3
			'copie de la valeur du programme passe en parametre
				Set WshShell = CreateObject("WScript.Shell")
				WshShell.SendKeys ("^a")
				WshShell.SendKeys ("^c")
				Set objHTML = CreateObject("htmlfile")
'				objHTML.ParentWindow.ClipboardData.ClearData()
			    Dim Res,arr,Res2
				
				'Set objHTML = CreateObject("htmlfile")
				ClipboardText = objHTML.ParentWindow.ClipboardData.GetData("text")
				arr = Split(ClipboardText, Chr(13) + Chr(10) )
		'		arr= Mid(arr,1,19)
		 		
		 		Res2 = arr(0)
				Res = trim(Res2)
'				MsgBox Res
'				
'				MsgBox Res
'				If Res = ls_libelle_Str Then
'				
'					MsgBox "ok"
'					
'				ELSE
'				
'				    MsgBox "No"
'				    
'				End If
 			    objHTML.ParentWindow.ClipboardData.ClearData()
'			    pos1 = pos1 + 300
			    pos2 = pos2 + 50
			    Set WshShell = CreateObject("WScript.Shell")
 
	Loop Until (ls_libelle_Str = Res)

 

	Wait 1
	
	Reporter.ReportEvent micPass, "Ouverture du programme : " & ls_libelle_Str, "Programme  : " & ls_libelle_Str & " ouvert "
	wait 1
	Window("Menu_Princ_Fen_V11").Type  micReturn
	wait 1
	Window("Menu_Princ_Fen_V11").Type micHome
	
End Function
'--------------------------------------------------------------------------------------------------------------------------------------
'------------------------------------------------------------------------------------------------------------------------------------------------------


'		****** Nom fonction  :		AccesAuProgramme	V10 -------------------------------------------------------------------------------------------
'		****** Description :		Cette fonction permet d'accÃ©der au programme d'amplitude V10 en prenant en paramÃ©tre le libellÃ© du programme Ã  ouvrir	
'		****** ParamÃ¨tres d'entrÃ©e :		Le chemin qui mÃ¨ne au programme Ã  lancer	
'		****** ParamÃ¨tre de sortie :		N/A (ouverture du programme)	
'		****** Date de crÃ©ation  : 27/12/2019			
'		****** Date de MAJ  : 18/02/2020			
'		****** Description MAJ :			
Public Function AccesAuProgrammeV10Filiale (chemin, filiale)
	Dim res
	res = split(chemin,",")
	Dim nbr 
	nbr = UBound(res)
	For i = 0 To nbr Step 1
	    DoubleCliquerMenu res(i), filiale
	Next
End Function

Public Function AccesAuProgrammeV10 (chemin)
	Dim res, filiale
	filiale = ""
	res = split(chemin,",")
	Dim nbr 
	nbr = UBound(res)
	For i = 0 To nbr Step 1
	    DoubleCliquerMenu res(i), filiale
	Next
End Function

'
'Public Function AccesAuProgrammeV10 (chemin)
'	UIAWindow("Menu_Prin_Fen_V10").Activate
'	UIAWindow("Menu_Prin_Fen_V10").Maximize
'	UIAWindow("Menu_Prin_Fen_V10").Click 379, 752, micRightBtn
'	Wait 1
''	UIAMenu("Menu").UIAObject(chemin).Click
'	Dim objj
'	Set objj = Description.Create
'	objj("name").Value = chemin
'	'objj("mic-class").Value = "UIAObject"
'	Set objChildren = UIAMenu("Menu").ChildObjects(objj)
'	Dim nombre
'	nombre = objChildren.Count
'	'MsgBox nombre
'	Dim Children
'	Set Children = objChildren(0)
'	'
'	Children.Click
'	'
'	Wait 3
'
'End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		****** Nom fonction  :		DoubleCliquerMenu	(V10) -------------------------------------------------------------------------------------------
'		****** Description :		Cette fonction permet de faire des clique double sur le menu indiquer	
'		****** ParamÃ¨tres d'entrÃ©e :		LibellÃ© du programme oÃ¹ on doit faire le double clic	
'		****** ParamÃ¨tre de sortie :		N/A (ouverture du programme)	
'		****** Date de crÃ©ation  : 27/12/2019			
'		****** Date de MAJ  : 27/12/2019			
'		****** Description MAJ :	

Function DoubleCliquerMenu (libelleMenu, filiale)

''''''''	If(filiale = "SGGH")Then 
''''''''	
''''''''		Dim FenPrinc
''''''''		Set FenPrinc = Window("MenuPrincipale")
''''''''		
''''''''		If(FenPrinc.Exist)Then 
''''''''			FenPrinc.Activate
''''''''			wait 1
''''''''			
''''''''			'--------------Recup premiere date du tableau
''''''''			Find = 0
''''''''			Do 
''''''''			
''''''''				wait 1
''''''''				FenPrinc.Type micCtrlDwn + "c" + micCtrlUp
''''''''										
''''''''				wait 1
''''''''				Set objCopy= CreateObject("Mercury.Clipboard")
''''''''				ligne = objCopy.GetText
''''''''										
''''''''				Tableau_Ligne = Split(ligne,vbCrlf)
''''''''										
''''''''				Text_Menu = Tableau_Ligne(0)
''''''''				objCopy = null
''''''''				
''''''''				If(Trim(Text_Menu) = Trim(libelleMenu) )Then
''''''''				
''''''''					FenPrinc.Type micRight
''''''''					Find = 1
''''''''					
''''''''				Else
''''''''				
''''''''					FenPrinc.Type micDwn
''''''''					
''''''''				End If
''''''''			
''''''''			Loop While (Find = 0)
''''''''			
''''''''			'--------------Fin Recup premiere date du tableau
''''''''			
''''''''			
''''''''			
''''''''		End If
''''''''	
''''''''	Else
	
			'ls_FenPrincipal_Win.Activate
			Dim fenOut, FenIn, tree, menuObj
			Select case filiale
			    			
				case "SGCI_TESTING","SGB", "SGCI"
					Set fenOut = UIAWindow("DELTA Bank")
					Set fenIn = UIAWindow("DELTA Bank").UIAWindow("DELTA Bank")
					
				case "SGBFAD"
				   	Set fenOut = UIAWindow("MenuV10")
					Set fenIn = UIAWindow("MenuV10").UIAWindow("Sopra Banking Amplitude")
					
				case "SGBFADT"
				   	Set fenOut = UIAWindow("MenuV10_3")
					Set fenIn = UIAWindow("MenuV10_3").UIAWindow("Sopra Banking Amplitude_2")
					
				case "SGT"
				   	Set fenOut = UIAWindow("Menu_Prin_Fen_V10")
					Set fenIn =  UIAWindow("Menu_Prin_Fen_V10").UIAWindow("Sopra Banking Amplitude")
		
					
			    case "SGBS","SGSN"
					Set fenOut = UIAWindow("DELTA Bank")
					Set fenIn = UIAWindow("DELTA Bank").UIAWindow("DELTA Bank")
					
				 case "SGBSPROD",""
					Set fenOut = UIAWindow("Menu_Prin_Fen_V10")
					Set fenIn = UIAWindow("Menu_Prin_Fen_V10").UIAWindow("DELTA Bank")
					
				 case "SGCAMPOC","SGT","SGBF","SGCAM"
					Set fenOut = UIAWindow("MenuV10")
					Set fenIn = UIAWindow("MenuV10").UIAWindow("Sopra Banking Amplitude")
		
				 
				case else
				   Reporter.ReportEvent micfail, "Aller au Menu", "Impossible de trouver le menu " & libelleMenu
			End select
			
			'Set menuObj = fenIn.UIATree("Tree").UIAObject("Menu client")
			
			ChangerLienMenu menuObj, libelleMenu
			
		     fenOut.Maximize
		     
			menuObj.Activate
	
''''	
''''	End If

	
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------

Public Function RenommerObject (Obj, libelle)
	Obj.SetTOProperty "TestObjName", libelle
End Function


Public Function ChangerLienMenu (Obj, name )
	Obj.SetTOProperty "TestObjName", name
	Obj.SetTOProperty "path", "*:*:*::" & name
	Obj.SetTOProperty "name", name
End Function


Public Function GetRepoName(obj)
    GetRepoName = obj.GetTOProperty("TestObjName")
End Function

'		****** Nom fonction  :		FermerMenu	(V10) -------------------------------------------------------------------------------------------
'		****** Description :		Cette fonction permet de dÃ©plier le menu V10 ouvert au lancement du programme d'amplitude V10 	
'		****** ParamÃ¨tres d'entrÃ©e :		version, chemin du menu Ã  dÃ©plier
'		****** ParamÃ¨tre de sortie :		N/A
'		****** Date de crÃ©ation  : 27/12/2019			
'		****** Date de MAJ  : 27/12/2019			
'		****** Description MAJ :	

Public Function FermerMenu (version, chemin)
	Dim filiale
	filiale = ""
	If version = "V10" Then
		Dim res
		res = split(chemin,",")
		Dim nbr 
		nbr = UBound(res)
		For i = nbr - 1 To 0 Step -1
		    DoubleCliquerMenu  res(i), filiale
		Next
	End If
		
End Function


Public Function FermerMenuFiliale (version, chemin, filiale)
	If version = "V10" Then
		Dim res
		res = split(chemin,",")
		Dim nbr 
		nbr = UBound(res)
		For i = nbr - 1 To 0 Step -1
		    DoubleCliquerMenu  res(i), filiale
		Next
	End If
		
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------




'		****** Nom fonction  :		ChoixDeLaLigne	(V10 et V11) -------------------------------------------------------------------------------------------
'		****** Description :		Cette fonction permet de choisir la ligne de la feuille de donnÃ©es Ã  considÃ©rer dans le dÃ©roulement du scripts 	
'		****** ParamÃ¨tres d'entrÃ©e :		version, chemin du menu Ã  dÃ©plier
'		****** ParamÃ¨tre de sortie :		N/A
'		****** Date de crÃ©ation  : 26/02/2020
'		****** Date de MAJ  : 26/02/2020			
'		****** Description MAJ :	
Public Function ChoixDeLaLigne(version, chemin, filiale)
	Dim temp
	nbLignes = DataTable.GetSheet("Global").GetRowCount
	For i=1 to nbLignes
		temp = DataTable.Value("traitement", "Global")
		temp = Trim(temp)
		If temp = "x" then
			'DataTable.GetSheet("Global").SetCurrentRow(i)
			'dÃ©rouler le test
			filiale = DataTable.Value("filiale", "Global")
			version = DataTable.Value("version", "Global")
			If version = "V10" Then
				chemin = DataTable.Value("menuv10", "Global")
			Else
				chemin = DataTable.Value("menuv11", "Global")
			End If
			'MsgBox "version : " & version & " / menu "  & menu
		End If
		'DataTable.GetSheet("Global").SetNextRow
	Next
	
	
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------




'		****** Nom fonction  :		accesAuProgrammePrincipal -----------------------------------------------------------------------------------------
'		****** Description :		Cette fonction permet d'accÃ©der au programme d'amplitude	
'		****** ParamÃ¨tres d'entrÃ©e :		version, menu
'		****** ParamÃ¨tre de sortie :		N/A
'		****** Date de crÃ©ation  : 13/01/2020			
'		****** Date de MAJ  : 13/01/2020			
'		****** Description MAJ :

Public Function accesAuProgrammePrincipal (version, chemin)
	
	If version = "V10" Then
			AccesAuProgrammeV10  chemin
	Else
		If version = "V11" Then
			AccesAuProgrammeV11 chemin
		Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃ©der au menu demandÃ©"
		End If
	End If
End Function

Public Function accesAuProgrammePrincipalFiliale (version, chemin, filiale)
	ChoixDeLaLigne version, chemin, filiale
	If version = "V10" Then
		If filiale = "" Then
			AccesAuProgrammeV10  chemin
		Else
			AccesAuProgrammeV10Filiale  chemin, filiale
		End If
		
	Else
		If version = "V11" Then
			AccesAuProgrammeV11 chemin
		Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃ©der au menu demandÃ©"
		End If
	End If
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------


'		****** Nom fonction  :		AccesAuProgramme2	
'		****** Description :		Cette fonction permet d'accÃ©der au programme d'amplitude V10 en prenant en paramÃ©tre le libellÃ© du programme Ã  ouvrir	
'		****** ParamÃ¨tres d'entrÃ©e :		Fenetre de lancement des programme, Fenetre de recherche, LibellÃ© du programme Ã  lancer	
'		****** ParamÃ¨tre de sortie :		N/A (ouverture du programme)	
'		****** Date de crÃ©ation  : 27/12/2019			
'		****** Date de MAJ  : 27/12/2019			
'		****** Description MAJ :



'		****** Nom fonction  :		AccesAuProgramme2	
'		****** Description :		Cette fonction permet d'accÃ©der au programme d'amplitude V10 en prenant en paramÃ©tre le libellÃ© du programme Ã  ouvrir	
'		****** ParamÃ¨tres d'entrÃ©e :		Fenetre de lancement des programme, Fenetre de recherche, LibellÃ© du programme Ã  lancer	
'		****** ParamÃ¨tre de sortie :		N/A (ouverture du programme)	
'		****** Date de crÃ©ation  : 27/12/2019			
'		****** Date de MAJ  : 27/12/2019			
'		****** Description MAJ :






'		****** Nom fonction  :		FermerFenetre	
'		****** Description :		Cette fonction permet de fermer un programme
'		****** ParamÃ¨tres d'entrÃ©e :		Fenetre du programme du programme Ã  lancer, nbre de clic pour le fermer	
'		****** ParamÃ¨tre de sortie :		N/A (ouverture du programme)	
'		****** Date de crÃ©ation  : 27/12/2019			
'		****** Date de MAJ  : 27/12/2019			
'		****** Description MAJ :			
Function FermerFenetre(ls_FenProg_Win, nbr_iteration)
	Dim windowName
	windowName =  ls_FenProg_Win.GetROProperty("text")

	Do 
		nbr_iteration = nbr_iteration - 1
		If (ls_FenProg_Win.Exist = False) Then Exit Do
		ls_FenProg_Win.InsightObject("close").Click
		'ls_FenProg_Win.InsightObject("close").Type micF3
		Wait 1
	Loop While (nbr_iteration > 1)
	
	Reporter.ReportEvent micPass, "Fermeture de la fenetre : " & windowName, "test OK"
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------


'************************************************
'		***** Nom Fonction : EndTest ------------------------------------------------------------------------------------------------------------------
'		***** Description : ArrÃªter l'exÃ©cution du test encours
'		***** ParamÃ¨tres en entrÃ©e : strEvent, strReason, strDescription
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 30/12/2019
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Function EndTest(strEvent, strReason, strDescription)
	Reporter.ReportEvent strEvent, strReason, strDescription
	ExitTest
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------


'************************************************
'		***** Nom Fonction : ChoisirOperation
'		***** Description : Cette mÃ©thode permet de choisir une opÃ©ration (Create, QUERY, ...)
'		***** ParamÃ¨tres en entrÃ©e : ls_FenProg_Win, ls_Action_Str
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 30/12/2019
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Function ChoisirOperation(ls_FenProg_Win, ls_Action_Str)
	'Cette fonction permet le choix de l'operation a executer
	ls_FenProg_Win.Activate
	ls_FenProg_Win.InsightObject(ls_Action_Str).Click
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : chercherFenetre ----------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de retrouver une fenetre ouverte sur le bureau
'		***** ParamÃ¨tres en entrÃ©e : menu 'titre de la fenÃªtre
'		***** ParamÃ¨tres en sortie : fenetre
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 
Public Function chercherFenetre (obj, menu, action)
	Dim desc
	Set desc = Description.Create
	desc("title").Value = "^.*" & menu & ".*" 
	'Dim fenetre
	'ReDim menu
	Set objChildren = Desktop.ChildObjects(desc)
	Dim NumberOfElements
	NumberOfElements = objChildren.Count
	If NumberOfElements = 0 Then
		Reporter.ReportEvent micFail, "Echec du test", "Pas de fenÃªtre trouvÃ© pour faire l'action : " & action
		ExitTest
	Else
		For it = 0 To NumberOfElements - 1
			
			Set obj = objChildren(it)
			'Exit For
			Exit For
		Next
	End If
	'Retourner la fenetre
	'chercherFenetre = fenetre
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : saisieInfosEnregistrement -------------------------------------------------------------------------------------------------
'		***** Description : Une fois le programme lancÃ© et l'opÃ©ration choisie, cette fonction permet de saisir un identifiant de l'enregistrement et de valider 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 
Public Function saisieInfosEnregistrement (fenetre, record)
	fenetre.Type record
	fenetre.Type micTab
	fenetre.Type micEsc
	Wait 4
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : DebuterAction -------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de commencer l'opÃ©ration Ã  effectuer en fonction de la langue FR et de renseigner l'id de l'enregistrement 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, action, record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function DebuterAction(fenetre, action, record)
	action = Trim (action)
	action = Ucase (action)
	Select case action
		case "HISTORIQUEE"
		   fenetre.Type micAltDwn + "H" + micAltUp
		case "SUPPRES"
			fenetre.Type micAltDwn + "D" + micAltUp 'S pour SUPPRES
		case "INTERROGER", "HISTORIQUE"
			fenetre.Type micAltDwn + "I" + micAltUp
		case else
		   Reporter.reporevent micfail, "choix vsion", "Echec version non trouvÃ©e"
		   EndTest
	End select

	Wait 2
	saisieInfosEnregistrement fenetre, record
	fenetre.CaptureBitmap (action & "_" & record & "_1.png")
	Wait 2
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : StartingAction -----------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de commencer l'opÃ©ration Ã  effectuer en fonction de la langue EN et de renseigner l'id de l'enregistrement 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, action, record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 
Public Function StartingAction(fenetre, action, record)
	action = Trim (action)
	action = Ucase (action)
	Select case action
		'case "Create"
		'   fenetre.Type micAltDwn + "C" + micAltUp
		case "MODIFY"
		   fenetre.Type micAltDwn + "M" + micAltUp
		case "HISTORY"
		   fenetre.Type micAltDwn + "H" + micAltUp
		case "DELETION"
			fenetre.Type micAltDwn + "D" + micAltUp 'S pour SUPPRES
		case "QUERY"
			fenetre.Type micAltDwn + "Q" + micAltUp
		case else
		   Reporter.reporevent micfail, "choix operation", "opÃ©ration non trouvÃ©e"
		   EndTest
	End select

	Wait 2
	saisieInfosEnregistrement fenetre, record
	fenetre.CaptureBitmap (action & "_" & record & ".png")
	Wait 2
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : SuiteAction -------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de terminer l'opÃ©ration Ã  effectuer en fonction de la langue FR et de renseigner l'id de l'enregistrement 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, action (opÃ©ration), record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function SuiteAction(fenetre, action, record)
	action = Trim (action)
	action = Ucase (action)
	Select case action
		case "HISTORIQUE"
		   fenetre.Type micF3
		   Wait 1
		   fenetre.Type micF3
		case "SUPPRES"
			'Clic sur le bouton Delete ensuite faire la validation et quitter
		case "INTERROGER"
		   fenetre.Type micF3
		   Wait 1
		   fenetre.Type micF3
		case else
		   Reporter.reporevent micfail, "choix operation", "opÃ©ration non trouvÃ©e"
		   ExitTestIteration
	End select
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : EndingAction -------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de terminer l'opÃ©ration Ã  effectuer en fonction de la langue EN et de renseigner l'id de l'enregistrement 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, action (opÃ©ration), record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function EndingAction(fenetre, action, record)
	action = Trim (action)
	action = Ucase (action)
	Select case action
		case "HISTORY", "QUERY"
			'Capture de la fenetre
			fenetre.CaptureBitmap (action & "_" & record & "_2.png")
		   fenetre.Type micF3
		   Wait 1
		   fenetre.Type micF3
		case "DELETION"
			fenetre.Type micF12
			fenetre.CaptureBitmap (action & "_" & record & ".png")
			fenetre.Type " "
			Wait 1
			fenetre.Type micF3
		case else
		   Reporter.reporevent micfail, "choix operation " & action, "Respecter la casse de la chaine de l'opÃ©ration"
		   ExitTestIteration
	End select
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : DemarrerAction ------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de commencer l'opÃ©ration Ã  effectuer en fonction de la langue.
'		*****				Elle appelle les mÃ©thodes crÃ©es ci-haut : DebuterAction et StartingAction
'		***** ParamÃ¨tres en entrÃ©e : langue (EN ou FR), fenetre, action (opÃ©ration), record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function DemarrerAction (langue, fenetre, action, record)
	langue = Ucase(langue)
	If langue = "FR" Then 
		DebuterAction fenetre, action, record
	Else
		If langue = "EN" Then
			StartingAction fenetre, action, record
		Else 
			Reporter.reporevent micfail, "Echec de l'action " & action , "PrÃ©ciser la langue utilisÃ©e par cette filiale"
			ExitTestIteration
		End If
	End If
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : ArreterAction ------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de terminer l'opÃ©ration Ã  effectuer en fonction de la langue.
'		*****				Elle appelle les mÃ©thodes crÃ©es ci-haut : DebuterAction et StartingAction
'		***** ParamÃ¨tres en entrÃ©e : langue (EN ou FR), fenetre, action (opÃ©ration), record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function ArreterAction (langue, fenetre, action, record)
	langue = Ucase(langue)
	If langue = "FR" Then 
		SuiteAction fenetre, action, record
	Else
		If langue = "EN" Then
			EndingAction fenetre, action, record
		Else 
			Reporter.reporevent micfail, "Echec de l'action " & action , "PrÃ©ciser la langue utilisÃ©e par cette filiale"
			ExitTestIteration
		End If
	End If
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------


'		***** Nom Fonction : CamelCase ----------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de formater une chaine de caractÃ¨re en CamelCase
'		***** ParamÃ¨tres en entrÃ©e : chaine
'		***** ParamÃ¨tres en sortie : chaineFormattÃ©e
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function CamelCase (chaine)
	chaine = UCase(Left(chaine, 1)) &  Lcase(Mid(chaine, 2))
	CamelCase = chaine
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : WaitOpenningWindow  ----------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de formater une chaine de caractÃ¨re en CamelCase
'		***** ParamÃ¨tres en entrÃ©e : chaine
'		***** ParamÃ¨tres en sortie : chaineFormattÃ©e
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 
Public Function WaitOpenningWindow (chemin, objj)
	
	Set objj = Description.Create
	objj("title").Value = "^.*" & chemin & ".*" 
	Set objChildren = Desktop.ChildObjects(objj)
	Do 'objChildren.Count < 1
		Wait 2
		Set objChildren = Desktop.ChildObjects(objj)
  		i=i+1
	loop Until objChildren.Count >= 1 or i>14
End Function
'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : AttendreApparitionFenetre ----------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de faire une attente afin d'avoir l'apparition de la fenetre demandÃ©e 
'		***** ParamÃ¨tres en entrÃ©e : fenetre
'		***** ParamÃ¨tres en sortie : 
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 
Public Function AttendreApparitionFenetre (fenetre)
	Dim i
	i = 0
	Do 
		If (fenetre.Exist = False) Then
			Wait 3
			i=i+1
		End If
	loop Until fenetre.Exist = True or i> 60
	
	If  fenetre.Exist = False Then
		Reporter.ReportEvent micFail, "Ã©chec d'aparrition de la fenetre", "Impossible d'afficher la fenetre"
		ExitTest		
	End If
	
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------

Public Function AttendreApparitionFenetreV2 (fenetre)
	Dim i
	i = 0
	Do 
		If (fenetre.Exist = False) Then
			Wait 2
			i=i+1
			MsgBox i
		End If
	loop Until fenetre.Exist = True or i> 20
	
	'If  fenetre.Exist = False Then
		'Reporter.ReportEvent micFail, "Ã©chec d'aparrition de la fenetre", "Impossible d'afficher la fenetre"
		'ExitTest		
	'End If
	
End Function



'		***** Nom Fonction : AttendreApparitionFenetre ----------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de faire une attente afin d'avoir l'apparition de la fenetre demandÃ©e 
'		***** ParamÃ¨tres en entrÃ©e : fenetre
'		***** ParamÃ¨tres en sortie : 
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 
Public Function AttendreApparitionFenetreTiming (fenetre, timing)
	Dim i
	i = 0
	Do 
		If (fenetre.Exist = False) Then
			Wait 3
			i=i+1
		End If
	loop Until fenetre.Exist = True or i> (timing*3)
	
	If  fenetre.Exist = False Then
		Reporter.ReportEvent micFail, "Ã©chec d'aparrition de la fenetre", "Impossible d'afficher la fenetre"
		ExitTest		
	End If
	
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------




'		***** Nom Fonction : ChangerFenetre ----------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de changer d'objet de type fenetre en lui indiquant le libelle 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, libelle
'		***** ParamÃ¨tres en sortie : 
'		***** Date crÃ©ation : 27/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function ChangerFenetre (Obj, libelle)
	Obj.SetTOProperty "text", "^.*" & libelle & ".*"
End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------

'		***** Nom Fonction : FaireDescendre ----------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de changer d'objet de type fenetre en lui indiquant le libelle 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, libelle
'		***** ParamÃ¨tres en sortie : 
'		***** Date crÃ©ation : 27/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function FaireDescendre (Obj, nbreFois)
	For i = 1 To nbreFois
		Obj.Type micDwn
	Next
End Function






'		***** Nom Fonction : Faireattendre ----------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de faire tabuler un nombre de fois
'		***** ParamÃ¨tres en entrÃ©e : fenetre,nombre de fois de tabulation
'		***** ParamÃ¨tres en sortie : 
'		***** Date crÃ©ation : 17/03/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 


Public Function waitStep (fenetre,nbreFois)
	For i = 1 To nbreFois
		fenetre.Type micTab
		wait 1
	Next
End Function
'fenetre cocher
Public Function waitCheck (fenetre,nbreFois)
	For i = 1 To nbreFois
		fenetre.Type " "
		wait 1
	Next
End Function



Public Function ChoixDeLaLigneV2()
	Dim temp
	nbLignes = DataTable.GetSheet("Global").GetRowCount
	For i=1 to nbLignes
		temp = DataTable.Value("traitement", "Global")
		temp = Trim(temp)
		If temp = "x" then
			'DataTable.GetSheet("Global").SetCurrentRow(i)
			'dÃ©rouler le test
			filiale = DataTable.Value("filiale", "Global")
			version = DataTable.Value("version", "Global")			
			chemin = DataTable.Value("menu", "Global")
			'MsgBox "version : " & version & " / menu "  & menu
		End If
		DataTable.GetSheet("Global").SetNextRow
	Next
	
	ChoixDeLaLigneV2 = filiale & "|" & version & "|" & chemin
End Function

Public Function accesAuProgrammePrincipalFilialeV2 ()
'   Tuer_programme_ouvert
	Dim Ligne
    Ligne = ChoixDeLaLigneV2
    TabLigne = split(Ligne,"|")

    filiale = TabLigne(0)
    version = TabLigne(1)
    chemin = TabLigne(2)
'MsgBox menu
	
	If version = "V10" Then
		If filiale = "" Then
			AccesAuProgrammeV10  chemin
			'MsgBox filiale
		Else
			AccesAuProgrammeV10Filiale  chemin, filiale
			'MsgBox filiale
		End If
		
	Else
		If version = "V11" Then
			AccesAuProgrammeV11 chemin
			'MsgBox filiale
		Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃ©der au menu demandÃ©"
		End If
	End If
End Function

Public Function FermerMenuFilialeV2 ()

    Dim Ligne
    Ligne = ChoixDeLaLigneV2
    TabLigne = split(Ligne,"|")

    filiale = TabLigne(0)
    version = TabLigne(1)
    chemin = TabLigne(2)
    
	If version = "V10" Then
		Dim res
		res = split(chemin,",")
		Dim nbr 
		nbr = UBound(res)
		For i = nbr - 1 To 0 Step -1
		    DoubleCliquerMenu  res(i), filiale
		Next
	End If
		
End Function



Public Function ChoixDeLaLigneGeneral()
	Dim temp
	nbLignes = DataTable.GetSheet("Global").GetRowCount
	For i=1 to nbLignes
		temp = DataTable.Value("traitement", "Global")
		temp = Trim(temp)
		If temp = "x" then
			'DataTable.GetSheet("Global").SetCurrentRow(i)
			'dÃ©rouler le test
			filiale = DataTable.Value("filiale", "Global")
			version = DataTable.Value("version", "Global")			
			'chemin = DataTable.Value("menu", "Global")
			'MsgBox "version : " & version & " / menu "  & menu
		End If
		DataTable.GetSheet("Global").SetNextRow
	Next
	
	ChoixDeLaLigneGeneral = filiale & "|" & version
End Function

Public Function FermerMenuFilialeGeneral (cheminG)

    Dim Ligne
    Ligne = ChoixDeLaLigneGeneral
    Ligne = Ligne & "|" & cheminG
    TabLigne = split(Ligne,"|")

    filiale = TabLigne(0)
    version = TabLigne(1)
    chemin = cheminG
    
	If version = "V10" Then
		Dim res
		res = split(chemin,",")
		Dim nbr 
		nbr = UBound(res)
		'For i = nbr - 1 To 0 Step -1
		   ' DoubleCliquerMenu  res(i), filiale
		   
		   'MsgBox nbr
		'Next
		
		For i = nbr  To 0 Step -1
		    toto = res(i)
		    DoubleCliquerMenu  toto, filiale
		     '
		   'MsgBox  toto
		Next
		
		
	End If
		
End Function



Function Replier_Menu_General ()

 Dim Ligne
    Ligne = ChoixDeLaLigneGeneral
    TabLigne = split(Ligne,"|")

    filiale = TabLigne(0)

    Dim Variable_Menu, Chaine, Taille, ChaineSP, chemin
	Select case filiale
		case "SGBF"
		     Variable_Menu = UIAWindow("Menu_Prin_Fen_V10").UIAWindow("Sopra Banking Amplitude").UIATree("Tree").GetVisibleText
		case "SGBFAD"
		     Variable_Menu = UIAWindow("MenuV10").UIAWindow("Sopra Banking Amplitude").UIATree("Tree").GetVisibleText
		case "SGB"
		    Variable_Menu = UIAWindow("DELTA Bank").UIAWindow("DELTA Bank").UIATree("Tree").GetVisibleText
		case "SGCI",""
		     Variable_Menu = UIAWindow("Menu_Prin_Fen_V10").UIAWindow("DELTA Bank").UIATree("Tree").GetVisibleText
	    case "SGBS",""
	         Variable_Menu = UIAWindow("DELTA Bank").UIAWindow("DELTA Bank").UIATree("Tree").GetVisibleText
		case else
		   Reporter.ReportEvent micfail, "Aller au Menu", "Impossible de trouver le menu " & libelleMenu
		   EndTest
	End select
	
	
	Tableau_Tree = split(Variable_Menu,VbCr)
    nbre_Tableau_Tree = UBound(Tableau_Tree)

For j = 0 To nbre_Tableau_Tree Step 1

   Chaine = Tableau_Tree(j)
   ChaineSP = trim(Chaine)
   Taille = len(ChaineSP)

  val_compare = Mid(ChaineSP,1,3)
  
  if(Instr(val_compare,"v")) Then   
     'MsgBox ChaineSP &VbCr& Taille &VbCr& Mid(ChaineSP,1,3) 
     
       If(Instr(ChaineSP,"Menu dient")) Then
         ChaineSP = "Menu client"
         Chaine_ajout = ChaineSP
       Else 
         longueur = len(ChaineSP)
         longeur_final = longueur -2
         Chaine_ajout = trim( Mid(ChaineSP,3,longeur_final) )
       End  If
      
     chemin = chemin &  Chaine_ajout  &","
      
  End  If
   
    
 Next
 
  chemin =  Mid(chemin,1,len(chemin) - 1)
 'MsgBox chemin

FermerMenuFilialeGeneral (chemin)
	
	
	
End Function


'--------------------------------------------------------------------------------
Public Function accesAuProgrammePrincipalFilialeV3 (filiale, version, chemin)
    'Tuer_programme_ouvert
	If version = "V10" Then
		If filiale = "" Then
			AccesAuProgrammeV10  chemin
			'MsgBox filiale
		Else
			AccesAuProgrammeV10Filiale  chemin, filiale
			'MsgBox filiale
		End If
		
	Else
		If version = "V11" Then
			AccesAuProgrammeV11 chemin
			'MsgBox filiale
		Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accéder au menu demandé"
		End If
	End If
End Function


Public Function FermerMenuFilialeV3 (filiale, version, chemin)

   If version = "V10" Then
		Dim res
		res = split(chemin,",")
		Dim nbr 
		nbr = UBound(res)
		For i = nbr - 1 To 0 Step -1
		    DoubleCliquerMenu  res(i), filiale
		Next
	End If
		
End Function


Public Function Appel_fenetre ()
	
	nbFenetre = DataTable.GetSheet(dtLocalSheet).GetRowCount
	For i=1 to nbFenetre
		DataTable.GetSheet(dtLocalSheet).SetCurrentRow(i)
		temp = DataTable.Value("traitement", dtLocalSheet)
		temp = Trim(temp)
		If temp = "x" then
			
			filiale = DataTable.Value("filiale", dtLocalSheet)
			version = DataTable.Value("version", dtLocalSheet)			
			chemin = DataTable.Value("menu", dtLocalSheet)
			
			If version = "V11" Then
			
				wait 2		
			    accesAuProgrammePrincipalFilialeV3 filiale, version, chemin
			
			    wait 1	
			    action = DataTable.Value("action", dtLocalSheet)
			    RunAction action, oneIteration 'Appel de l action propre
			
			    wait 3
			    FermerMenuFilialeV3	filiale, version, chemin
			    
			Else 'V10
				
				accesAuProgrammePrincipalFilialeV3 filiale, version, chemin

				wait 1
				fenetre = DataTable.Value("expression", dtLocalSheet)
				AfficheProgramme "FenetreGenerique", fenetre,0 'On reduit le programme
				
				wait 3
			    FermerMenuFilialeV3	filiale, version, chemin
				wait 1
				AfficheProgramme "FenetreGenerique", fenetre,1  'On agrandi le programme
				
				 wait 1	
			    action = DataTable.Value("action", dtLocalSheet)
			    RunAction action, oneIteration 'Appel de l action propre
				
				
			End If
			
			
		End If
	Next
End Function


Public Function accesAuProgrammePrincipalFilialeV3_Groupe ()
   'Tuer_programme_ouvert
	Dim Ligne
    Ligne = ChoixDeLaLigneV2
    TabLigne = split(Ligne,"|")

	version = TabLigne(1)
    chemin = TabLigne(2)
	
	If version = "V11" Then
	    Dim res
		res = split(chemin,",")
		AccesAuProgrammeV11_Groupe res(0), chemin
	Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃ©der au menu demandÃ©"
	End If

End Function

'Public Function AccesAuProgrammeV11_Groupe (ls_libelle_Str, position)
'	Window("Menu_Princ_Fen_V11").Activate
'	'Wait 1
'	Window("Menu_Princ_Fen_V11").Maximize
'	'Wait 1
'	Window("Menu_Princ_Fen_V11").Click 379, 652, micRightBtn
'	Wait 1
'	Window("Menu_Princ_Fen_V11").Type  micUp
'	'Wait 1
'	Window("Menu_Princ_Fen_V11").Type  micReturn 
'	Window("Recherche_Fen").Type ls_libelle_Str 
'	Window("Recherche_Fen").Type micTab
'	
'	Window("Recherche_Fen").Type micTab
'	
'	Window("Recherche_Fen").Type micTab
'	wait 1
'	Window("Menu_Princ_Fen_V11").Type  micRight 
'	wait 1
'	
'		For i=1 to position
'		    Window("Menu_Princ_Fen_V11").Type  micDwn	    
'		    wait 1
'		Next
'	
'	Window("Menu_Princ_Fen_V11").Type  micReturn	
'	
'End Function
'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : SuiteAction -------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de terminer l'opÃ©ration Ã  effectuer en fonction de la langue FR et de renseigner l'id de l'enregistrement 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, action (opÃ©ration), record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function AccesAuProgrammeV11_Groupe (ls_libelle_Str, chemin)
	Window("Menu_Princ_Fen_V11").Activate
	'Wait 1
	Window("Menu_Princ_Fen_V11").Maximize
	'Wait 1
	Window("Menu_Princ_Fen_V11").Click 379, 652, micRightBtn
	Wait 1
	Window("Menu_Princ_Fen_V11").Type  micUp
	'Wait 1
	Window("Menu_Princ_Fen_V11").Type  micReturn 
	Window("Recherche_Fen").Type ls_libelle_Str 
	Window("Recherche_Fen").Type micTab
	
	Window("Recherche_Fen").Type micTab
	
	Window("Recherche_Fen").Type micTab
	wait 1
	
	Dim ver
	ver = split(chemin,";")
		
	Dim verifres
	verifres = ver(1)
	
	Dim res
	res = split(ver(0),",")
	
	NbreMenu =  UBound(res)
	Dim x
	x = 0
	Do 
		x=x+1
		
		Window("Menu_Princ_Fen_V11").Type  micRight 
		wait 1
		
		For i=1 to res(x)
				
				
				
				For ij=1 to 2
					Set WshShell = CreateObject("WScript.Shell")
					WshShell.SendKeys ("^a")
					WshShell.SendKeys ("^c")
					Set objHTML = CreateObject("htmlfile")
					ClipboardText = objHTML.ParentWindow.ClipboardData.GetData("text")
					arr = Split(ClipboardText, Chr(13) + Chr(10) )
					Res2 = arr(0)
					Resz = trim(Res2)
					wait 3
					'MSGBOX Resz
				Next
				
				IF(Resz = verifres)then
					x = NbreMenu + 10
					Exit For
					
				ELSE
					Window("Menu_Princ_Fen_V11").Type  micDwn
				end If
		
		
					    
			wait 1
					
		Next
		
		
	Loop While x < NbreMenu
	
	Window("Menu_Princ_Fen_V11").Type  micReturn	
	
End Function
'-----------------------------------------------------------------------------------------------------------------------------------------------------
Public Function AccesAuProgrammeV11_Groupe_TEST (ls_libelle_Str, chemin)
	Window("Menu_Princ_Fen_V11").Activate
	'Wait 1
	Window("Menu_Princ_Fen_V11").Maximize
	'Wait 1
	Window("Menu_Princ_Fen_V11").Click 379, 652, micRightBtn
	Wait 1
	Window("Menu_Princ_Fen_V11").Type  micUp
	'Wait 1
	Window("Menu_Princ_Fen_V11").Type  micReturn 
	Window("Recherche_Fen").Type ls_libelle_Str 
	Window("Recherche_Fen").Type micTab
	
	Window("Recherche_Fen").Type micTab
	
	Window("Recherche_Fen").Type micTab
	wait 1
	
	Dim ver
	ver = split(chemin,";")
'	MsgBox ver
	
	Dim verifres
	verifres = ver(1)
	'MsgBox verifres
	
	Dim res
	res = split(ver(0),",")
	'MsgBox res
	
	NbreMenu =  UBound(res)
	'MsgBox NbreMenu
	Dim x
	x = 0
	Do 
		x=x+1
		
		Window("Menu_Princ_Fen_V11").Type  micRight 
		wait 1
		
		For i=1 to res(x)
			
				
				
				For ij=1 to 2
					Set WshShell = CreateObject("WScript.Shell")
					WshShell.SendKeys ("^a")
					WshShell.SendKeys ("^c")
					Set objHTML = CreateObject("htmlfile")
					ClipboardText = objHTML.ParentWindow.ClipboardData.GetData("text")
					arr = Split(ClipboardText, Chr(13) + Chr(10) )
					Res2 = arr(0)
					Resz = trim(Res2)
					wait 3
					'MSGBOX Resz
					objHTML.ParentWindow.ClipboardData.ClearData()
				Next
				
				IF(Resz = verifres)then
					x = NbreMenu + 10
					Exit For
					
				ELSE
					Window("Menu_Princ_Fen_V11").Type  micDwn
				end If
		
		
					    
			wait 1
		
		Next
		
		
	Loop While x < NbreMenu
	
	Window("Menu_Princ_Fen_V11").Type  micReturn	
	
End Function

Public Function accesAuProgrammePrincipalFilialeV3_Groupe_TEST()
   Tuer_programme_ouvert
	Dim Ligne
    Ligne = ChoixDeLaLigneV2
    TabLigne = split(Ligne,"|")

	version = TabLigne(1)
    chemin = TabLigne(2)
	
	If version = "V11" Then
	    Dim res
		res = split(chemin,",")
		AccesAuProgrammeV11_Groupe_TEST res(0), chemin
	Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃ©der au menu demandÃ©"
	End If

End Function

'------------------------------------------------------------------------------------------------------------------------------------------------------



'		***** Nom Fonction : SuiteAction -------------------------------------------------------------------------------------------------------------
'		***** Description : Cette mÃ©thode permet de terminer l'opÃ©ration Ã  effectuer en fonction de la langue FR et de renseigner l'id de l'enregistrement 
'		***** ParamÃ¨tres en entrÃ©e : fenetre, action (opÃ©ration), record
'		***** ParamÃ¨tres en sortie : N/A
'		***** Date crÃ©ation : 12/02/2020
'		***** Date M.A.J : 
'		***** Description M.A.J : 

Public Function FermerMenuFilialeV3_Groupe ()

    Dim Ligne
    Ligne = ChoixDeLaLigneV2
    TabLigne = split(Ligne,"|")

    filiale = TabLigne(0)
    version = TabLigne(1)
    chemin = TabLigne(2)
    
	If version = "V11" Then	
	
		Window("Menu_Princ_Fen_V11").Activate
		wait 1
		Window("Menu_Princ_Fen_V11").Maximize
		
		Dim res
		res = split(chemin,",")
		
		NbreMenu =  UBound(res) + 1
		Dim x
		x = 0
		
		Do 
			x=x+1	
			wait 1
			NbreMenu = NbreMenu - 1
			For i=1 to res(NbreMenu)
			
				Window("Menu_Princ_Fen_V11").Type  micUp	    
				wait 1
				
			Next
			
			Window("Menu_Princ_Fen_V11").Type micLeft 
			
		Loop While x < NbreMenu
		
		
		
		wait 1
	End If
		
End Function
'--------------------------------------------------------------------------------
Public Function FermerMenuFilialeV2_TEST ()
        Tuer_programme_ouvert
    Dim Ligne
    Ligne = ChoixDeLaLigneV2
    TabLigne = split(Ligne,"|")

    filiale = TabLigne(0)
    version = TabLigne(1)
    chemin = TabLigne(2)
    
	If version = "V10" Then
		Dim res
		res = split(chemin,",")
		Dim nbr 
		nbr = UBound(res)
		For i = nbr - 1 To 0 Step -1
		    DoubleCliquerMenu  res(i), filiale
		Next
	End If
		
End Function

'--------------------------------------------------------------------------------


'----------------------------------------------------------------------------------
Public Function Tuer_programme_ouvert ()

Reporter.ReportEvent micPass, " >>> Verifier l'existence de la fenetre Genero Destop", "succes"
	Dim libelleFenetreFermetureFr : libelleFenetreFermetureFr = "Genero Desktop Client- Fermer la connexion"
	Dim libelleFenetreFermetureEn : libelleFenetreFermetureEn = "Genero Desktop Client - Close connexion"
	Dim libelleFenetreFermetureEn1 : libelleFenetreFermetureEn1 = "Genero Desktop Client - Close connection" 'Le cas de SGBF
	
	
	If Window("Genero_Connexion").Exist(3) Then
	Reporter.ReportEvent micPass, ">>> *** La fenetre Genero Destop existe", "succes"
		wait 1
		Window("Genero_Connexion").Activate
		wait 1
		Reporter.ReportEvent micPass, " >>> Verifier l'existence de l'onglet Connexion", "succes"
		If Window("Genero_Connexion").InsightObject("Connexion").Exist(2) Then
		
		Reporter.ReportEvent micPass, " >>> *** l'onglet Connexion existe", "succes"    
		      wait 1
			Window("Genero_Connexion").InsightObject("Connexion").Click
			'Reporter.ReportEvent micPass, " >>> *** Clic sur le bouton connexion OK", "succes"   
			
			Window("Genero_Connexion").Type micTab
			wait 0,3
			'Reporter.ReportEvent micPass, " >>> *** Tabulation OK", "succes"   
			Window("Genero_Connexion").Type (" ")
			wait 0,3	
			
			For Iterator = 1 To 3
			       Window("Genero_Connexion").Type micUp
			       'Reporter.ReportEvent micPass, Iterator &  " >>> *** Up OK", "succes"   
			       wait 0,3
			Next
			
			
			For Iterator = 1 To 3
				Window("Genero_Connexion").Type (" ")
			       wait 0,3
			       ' Reporter.ReportEvent micPass, Iterator &  " >>> *** Espace", "succes"   		     
			        
			        Window("Genero_Connexion").Type micCtrlDwn + "c" + micCtrlUp
			wait 1,5
			Set objCopy= CreateObject("Mercury.Clipboard")
			ligne = objCopy.GetText
			objCopy = null			
			Verifligne = InStr(ligne, "Amplitude")
			Verifligne1 = InStr(ligne,"AmplitudeUp")  'Le cas de SGBF
			
						'MsgBox ligne
			If(Verifligne <> "0" or (Verifligne1 <> "0")) Then
					
				 wait 0,3
				   Window("Genero_Connexion").Type micDwn
			            Window("Genero_Connexion").Type (" ")
			
			Else
			  
			      wait 1
			       Window("Genero_Connexion").Type (" ")
		              wait 1
				 Window("Genero_Connexion").Type micTab
				  wait 1
				   Window("Genero_Connexion").Type micTab
				  wait 1
				  Window("Genero_Connexion").Type (" ")
				  wait 1
				  
				  'Activation de la fenetre de fermerture selon la langue du généro 
				  Dim fenetreFermeture
				  Set fenetreFermeture = Window("Genero_Connexion").Window("GeneroFermeture")
				  
				  ChangerFenetre fenetreFermeture, libelleFenetreFermetureFr
				  
				  If fenetreFermeture.Exist(4) Then
				  	Reporter.ReportEvent micPass, ">>> *** Vérifcication de la langue du généro", "le género est en langue française"
				  	fenetreExite = 1
				  	
				  	 fenetreFermeture.Activate
					 wait 1
					 fenetreFermeture.Type micTab
					 wait 1
					 fenetreFermeture.Type (" ")
					   
					 Reporter.ReportEvent micPass, Iterator &  " >>> Le Programme " & ligne & " ouvert a été fermé", "succes"
				  Else
				  
				  	Set fenetreFermeture = Window("GeneroConnexion2").InsightObject("Yes")
				  	ChangerFenetre fenetreFermeture, libelleFenetreFermetureEn
				  	
				  	If fenetreFermeture.Exist(4) Then
				  		Reporter.ReportEvent micPass, ">>> *** Vérifcication de la langue du généro", "le género est en langue anglaise"
'				  		fenetreExite = 1
'				  		
'				  		 fenetreFermeture.Activate
'						 wait 1
'						 fenetreFermeture.Type micTab
'						 wait 1
						wait 0,5
						 fenetreFermeture.Click
						   
						 Reporter.ReportEvent micPass, Iterator &  " >>> Le Programme " & ligne & " ouvert a été fermé", "succes"
					Else 
						Dim fenetreFermetureEn1
				 		Set fenetreFermetureEn1 = Window("Genero_Connexion").Window("GeneroFermeture")
				  
				  		ChangerFenetre fenetreFermetureEn1, libelleFenetreFermetureEn1
				  		
				  		If fenetreFermetureEn1.Exist(4) Then
				  			fenetreFermetureEn1.Activate
				  			wait 0,5
				  			fenetreFermetureEn1.Type micDwn
				  			wait 0,5
				  			fenetreFermetureEn1.Type " "
				  			
				  			Reporter.ReportEvent micPass, Iterator &  " >>> Le Programme " & ligne & " ouvert a été fermé", "succes"
				  		End If
				  		
				  	End If
				  End If
				  
'				  If fenetreExite = 1 Then
'				  
'				  	 fenetreFermeture.Activate
'					 wait 1
'					 fenetreFermeture.Type micTab
'					 wait 1
'					 fenetreFermeture.Type (" ")
'					   
'					 Reporter.ReportEvent micPass, Iterator &  " >>> Le Programme " & ligne & " ouvert a été fermé", "succes"
'					    
'				  End If
				  
				  
'				  Window("Genero_Connexion").Window("GeneroFermeture").Activate
'				  wait 1
'				  Window("Genero_Connexion").Window("GeneroFermeture").Type micTab
'				  wait 1
'				   Window("Genero_Connexion").Window("GeneroFermeture").Type (" ")
'				   
'				    Reporter.ReportEvent micPass, Iterator &  " >>> Le Programme " & ligne & " ouvert a été fermé", "succes"   	
				   
				    wait 2
				      Window("Genero_Connexion").Type micLeft
				   wait 1
				   Window("Genero_Connexion").Type micDwn
				   wait 0,3
			            Window("Genero_Connexion").Type (" ")
			
			      
			End If
			           'Window("Genero_Connexion").Activate
			      		        
			Next
			
		
		
		Else
		   Reporter.ReportEvent micFail, " L'onglet connexion n'est pas reconnu", "echec"
			
		End If
	

     Else
      
      Reporter.ReportEvent micFail, " La fenetre Genero Destop n'est pas reconnue", "echec"


	End If
	
End Function


'----------------------------------------------------------------------------------
Public Function Tuer_programme_ouvert_V1 ()

Reporter.ReportEvent micPass, " >>> Verifier l'existence de la fenetre Genero Destop", "succes"

	If Window("Genero_Connexion").Exist Then
	Reporter.ReportEvent micPass, ">>> *** La fenetre Genero Destop existe", "succes"
		wait 1
		Window("Genero_Connexion").Activate
		wait 1
		Reporter.ReportEvent micPass, " >>> Verifier l'existence de l'onglet Connexion", "succes"
		If Window("Genero_Connexion").InsightObject("Connexion").Exist(1) Then
		
		Reporter.ReportEvent micPass, " >>> *** l'onglet Connexion existe", "succes"    
		wait 1
			Window("Genero_Connexion").InsightObject("Connexion").Click
			
			Window("Genero_Connexion").Type micTab
			wait 1
			Window("Genero_Connexion").Type micHome
			wait 1				
			
			Window("Genero_Connexion").Type micCtrlDwn + "c" + micCtrlUp
			wait 0,5
			Set objCopy= CreateObject("Mercury.Clipboard")
			ligne = objCopy.GetText
			objCopy = null			
			Verifligne = InStr(ligne, "Amplitude")
									
			If(Verifligne <> "0" ) Then
			
'			If ( (Window("Genero_Connexion").InsightObject("Refrence_objet").Exist) or (Window("Genero_Connexion").InsightObject("Refrence_objet_V10").Exist) or (Window("Genero_Connexion").InsightObject("Referenceobjet2").Exist)  )  Then
'			If (Window("Genero_Connexion").InsightObject("Refrence_objet").Exist(2))  Then
				
				 wait 1
				 
			
			Else
			  
			      wait 1
			       Window("Genero_Connexion").Type (" ")
		              wait 1
				 Window("Genero_Connexion").Type micTab
				  wait 1
				  Window("Genero_Connexion").Type (" ")
				  wait 1
				  Window("Genero_Connexion").Type micTab
''				  wait 1
''				  Window("Genero_Connexion").Type micTab
				  wait 1
				   Window("Genero_Connexion").Type (" ")
				   wait 1
				  Window("GeneroConnexion2").InsightObject("Yes").Click
				  wait 1
			      
			End If
		
		Else
		   Reporter.ReportEvent micFail, " L'onglet connexion n'est pas reconnu", "echec"
			
		End If
	

     Else
      
      Reporter.ReportEvent micFail, " La fenetre Genero Destop n'est pas reconnue", "echec"


	End If
	
End Function
'--------------------------------------------------------------------------------------------------

Public Function AfficheProgramme(ReposTemplate, TitleFenetre, statut)

	Dim fenetreReduire
	Set fenetreReduire = Window(ReposTemplate) 
	
	ChangerFenetre fenetreReduire, TitleFenetre
	
	'Verification d'existance de la fenetre du formulaire
	If (fenetreReduire.Exist) Then
	
		fenetreReduire.Activate
		
		If statut = "0" Then 'On reduit la fenetre
			wait 1
		    fenetreReduire.Minimize
		Else 'On agrandi la fenetre
			wait 1
		    fenetreReduire.Restore
		End If
	
		
		
	End If

End Function 


'''''''''''''''''''''''Nouveau modèle

Public Function FermerMenuFilialeV5()
	
   version = Environment.Value("version_programme")
   If version = "V11" Then
				
		chemin_ferme = Environment.Value("chemin_programme_aborescence")
		VerifChemin_ferme = InStr(chemin_ferme, "#")
		
		If (VerifChemin_ferme <> "0" ) Then
			
			res = split(chemin_ferme,"#")
			 
			nbr = UBound(res)
			For i = nbr - 1 To 1 Step -1
				
				nombre = res(i)
				For j = 0 To nombre - 1 Step 1
					Window("Menu_Princ_Fen_V11").Type  micUp
					wait 1
				Next
				Window("Menu_Princ_Fen_V11").Type  micLeft
				
			Next
		
		End If
		
	End If
	
		
End Function



Public Function FermerMenuFilialeV4()
	
   Dim res	
   Dim nbr
   
   version = Environment.Value("version_programme")
   filiale = Environment.Value("filiale_programme")
   If version = "V10" Then
		
		res = split(Environment.Value("chemin_programme_ferme"),",") 
		nbr = UBound(res)
		For i = nbr - 1 To 0 Step -1
		    DoubleCliquerMenu  res(i), filiale
		Next
		
	Else
	'Prendre le curseur au premier élément menu 
	If veriflib>1 Then
	curseurPrincipale
	End If
	
	End If
		
End Function


Public Function OuvPosition(sheet, colonne, dblignes, nbLignes, libelle_search)

	'--------------------------------Bloc--------------------------'
            position_bloc = 0
            position_globale = 0
            bloc_precedent = ""
            '''bloc = DataTable.Value(colonne, sheet)
			
			'DataTable.GetSheet(sheet).SetCurrentRow(1)
			DataTable.GetSheet(sheet).SetCurrentRow(dblignes)
						
			For i_bloc = 1 to nbLignes Step 1
				
				position_globale = position_globale + 1
				
				blc = Trim(libelle_search)
				blc_current = TRIM(DataTable.Value(colonne, sheet))
				
				If(bloc_precedent <> blc_current) Then
					position_bloc = position_bloc + 1
				End If
				
				If blc = blc_current Then
				
					OuvPosition = position_bloc & "|" & position_globale
					Exit for
					
				End If
				
				bloc_precedent = blc_current
				
				DataTable.GetSheet(sheet).SetNextRow
				
			Next 
			
		'------------------------Fin Bloc--------------------------'

End Function


Public Function OuvProgFonct(filiale, sheet)
	
	
	Dim path,pathProgramme, programmeTrouve,nbLignes, position
	position_programme = 0
	OuvProgFonct = 0
	
	
	'******** Fichier programme fonctionnalisé *******
	pathProgramme = "[ALM\Resources] Resources\FichierParametre\ProgrammeFonctionnalise\ProgrammeFonctionnalise_"&filiale
	DataTable.ImportSheet pathProgramme, "Feuil1", sheet
	nbLignes = DataTable.GetSheet(sheet).GetRowCount
	programme = DataTable.Value("programme", "Global")
	
	For i = 1 to nbLignes Step 1
		
		prog = DataTable.Value("programme", sheet)
		prog = Trim(prog)		
		position_programme = position_programme + 1
		If Trim(prog) = Trim(programme) Then
			
			bloc = DataTable.Value("bloc", sheet)
			menu = DataTable.Value("menu", sheet)
			sous_menu = DataTable.Value("sous_menu", sheet) 
			
			Environment.Value("chemin_programme") = TRIM(menu)
			
			'Position du bloc
			position_bloc_globale = OuvPosition (sheet, "bloc", 1, nbLignes, bloc)
			position_bloc = split(position_bloc_globale,"|")(0)
			position_bloc_g = split(position_bloc_globale,"|")(1)
			'MSGBOX position_bloc
			
			
			'Position du menu
			position_menu_globale = OuvPosition (sheet, "menu", position_bloc_g, nbLignes, menu)
			position_menu = split(position_menu_globale,"|")(0)
			position_menu_g = split(position_menu_globale,"|")(1)
			'MSGBOX position_menu
			
			
			'Position du sous menu
			If(sous_menu <> "") Then
				position_sous_menu_globale = OuvPosition (sheet, "sous_menu", position_menu , nbLignes, sous_menu)
				position_sous_menu = split(position_sous_menu_globale,"|")(0)
				position_sous_menu_g = split(position_sous_menu_globale,"|")(1)
				
				Environment.Value("chemin_programme") = TRIM(sous_menu)
				'MSGBOX position_sous_menu		
			End If
			
			
			chemin = position_bloc & "," & position_menu & "," & position_sous_menu '& "," & position_programme	
			
			
			'MSGBOX chemin
			
			OuvProgFonct = chemin
			
			Exit For				
				
		End if
		DataTable.GetSheet(sheet).SetNextRow
	Next
	
	
End Function


Public Function DeroulChemin(nombre)
	
	For i = 1 To nombre Step 1
		wait 0.5
		Window("Menu_Princ_Fen_V11").Type micDwn
	Next
		
	Window("Menu_Princ_Fen_V11").Type micReturn
	
End Function


Public Function accesAuProgrammePrincipalFilialeV4()
	
	verifierNomHote
	
'------Recuperation du nom des programmes------'
	 Set Shell = CreateObject("wscript.Shell") 
	Set env = Shell.Environment("Process")
	strComputer = env.Item("Computername")
	    
	Recup_Programme
	   
	   
' Valorisation_automatique 
	
  Tuer_programme_ouvert
   
   'Prendre le curseur au premier élément du menu 
   
   
    Set sheet_use = DataTable.AddSheet("Sheet_ACTION_PRINCIPALE") 'On cree un sheet temporaire
		
	Dim path, sheet
	sheet = sheet_use.Name'"ACTION_PRINCIPALE"

    retour = split(LireFiliale,"@")
    
    filiale = retour(0)
    version = retour(1)
	
	Environment.Value("filiale_programme") = filiale
	Environment.Value("version_programme") = version	
	
	
	Fonction = OuvProgFonct(filiale, sheet)
If(Fonction = "0") Then 
	 
		'***** Fichier Arborescence **********
		path = "[ALM\Resources] Resources\FichierParametre\Aborescence_"&filiale 
		'path = "D:\Users\11492\Documents\Unified Functional Testing\ExcelsForTesting\Aborescence_SGBG.xlsx"
		DataTable.ImportSheet path, "Feuil1", sheet '"ACTION_PRINCIPALE"
		programme = DataTable.Value("programme", "Global")
		
'''		'verifier si le programme a un libelle en double
'''		veriflib=VerifDoubllibelle_V11(programme, filiale, version, sheet)
'''		'MsgBox veriflib
'''		if veriflib>1 then
			'OUVERTURE DU PROGRAMME SUR LA V11
'''			OuvreProgramme_V11 programme, filiale, version, sheet
'''		     else
			OuvreProgramme programme, filiale, version, sheet
'''		end If 
				
	Else
	
	   'MSGBOX Fonction
		'Window("Menu_Princ_Fen_V11").Restore
		Window("Menu_Princ_Fen_V11").Type micAltDwn + "f" + micAltUp
		
		
		retourPosition = split(Fonction,",")
    
		PoisitionBloc = retourPosition(0)
		DeroulChemin(PoisitionBloc - 1)
		
		
		PoisitionMenu = retourPosition(1)
		DeroulChemin(PoisitionMenu - 1)
		
		
		PoisitionSousMenu = retourPosition(2)
		If (PoisitionSousMenu <> "") Then
			DeroulChemin(PoisitionSousMenu - 1)
		End If
		
		wait 1
		
		
		
	End If
	
	
End Function



Public Function accesAuProgrammePrincipalFilialeV4_Old()
	
   Tuer_programme_ouvert

    retour = split(LireFiliale,"@")
    
    filiale = retour(0)
    version = retour(1)
	
	Environment.Value("filiale_programme") = filiale
	Environment.Value("version_programme") = version	
	
	Dim path
	
	'***** Fichier Arborescence **********
	path = "[ALM\Resources] Resources\FichierParametre\Aborescence_"&filiale
	DataTable.ImportSheet path, "Feuil1", "Sheet_ACTION_PRINCIPALE" '"ACTION_PRINCIPALE"
	programme = DataTable.Value("programme", "Global")
	
	
		
	OuvreProgramme programme, filiale, version, "Sheet_ACTION_PRINCIPALE" '"ACTION_PRINCIPALE"
	
End Function



Public Function OuvreProgramme(programme, filiale, version, sheet)
	
	If version = "V10" Then
	
		cheminComplet = RechercheNpr(programme)
		
		cheminsplit = split(cheminComplet,"|")
		
		chemin = cheminsplit(0)	
		Environment.Value("chemin_programme_ferme") = chemin
		Environment.Value("chemin_programme") = cheminsplit(1)
		
		If filiale = "" Then
			AccesAuProgrammeV10  chemin
		Else
			AccesAuProgrammeV10Filiale  chemin, filiale
		End If
		
	Else
	   If version = "V11" Then
				
			Dim Ligne
			
		    VerifAborescence = InStr(programme, "#O@u")	
			If (VerifAborescence <> "0") Then
			
				'Pour ressortir le nom du programme
				tabprog = split(programme,"|") 
				name_prog = tabprog(1)	
				
				Ligne = ChoixDeLaLigneV4(name_prog, sheet)
			    chemin = Ligne
			    
			    Environment.Value("chemin_programme") = Trim(chemin)
			    
			    
			    'Maintenant on doit ouvrir le programme
			    chemin_prog = tabprog(0)
			    Ligne = ChoixDeLaLigneV4(chemin_prog, sheet)
			    chemin = Ligne
'			    chemin = fnCorrigerCharSpe(Ligne)
			    
			    Environment.Value("chemin_programme_aborescence") = chemin_prog
			
				AccesAuProgrammeV12 chemin, name_prog
				
				Dim chemin_a_ouvrir
				chemin_a_ouvrir = split(chemin_prog,"#")
				Dim nbr 
				nbr = UBound(chemin_a_ouvrir)
				For i = 1 To nbr - 1 Step 1
				
					Window("Menu_Princ_Fen_V11").Activate
					'Wait 1
					Window("Menu_Princ_Fen_V11").Maximize
					'Wait 1
				    Window("Menu_Princ_Fen_V11").Type  micRight
				    
				    nombre = chemin_a_ouvrir(i)
				    For j = 0 To nombre - 1 Step 1
				    	wait 1
				    	Window("Menu_Princ_Fen_V11").Type  micDwn
				    Next
				 
				Next
				Window("Menu_Princ_Fen_V11").Type  micReturn
				wait 1
				
				
				
			else
							
			
			    Ligne = ChoixDeLaLigneV4(programme, sheet)
			    chemin = Ligne
'			    chemin = fnCorrigerCharSpe(Ligne)
			    
			    if(trim(ligne)="")then
			    	Reporter.ReportEvent micFail, "Execution KO", programme & " Programme introuvable"
			    	EndTest micPass, "Test KO ", "KO"  
			    else
			    
			    Environment.Value("chemin_programme") = Trim(chemin)
			
				AccesAuProgrammeV12 chemin, programme
				
				End If
				
			End If
			
		Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃƒÂ©der au menu demandÃƒÂ©"
		End If
	End If

End  Function

Public Function OuvreProgramme_V11(programme, filiale, version, sheet)

	Dim intRow, posProg, i, patienteur, prog
	
	patienteur = 1
	
	'COMPTE LE NOMBRE DE LIGNE
	rowCount = DataTable.GetSheet(sheet).GetRowCount
	
	wait patienteur
	
	'RECUPERE LA POSITION DU PROGRAMME DONNÉ DANS LA VARIABLE => posProg
	For intRow = 1 to rowCount
	
		prog = DataTable.Value("mprg", sheet)
		prog = Trim(prog)
		
		If prog = Trim(programme)  Then
			posProg = DataTable.Value("chprg", sheet)
			Exit For
		End If
		
		DataTable.GetSheet(sheet).SetNextRow
	Next 
	
	wait patienteur
	
	'CONVERTION DE LA POSITON EN TABLEAU
	touchs = Split(posProg,"|")
	
	i = 0
	
	wait patienteur
	
	Window("Menu_Princ_Fen_V11").Activate
	
	'RECHERCHE LE PROGRAMME DANS LE MENU
	For Each touch in touchs
	  If i = 0 Then
	  	tapeMicDwn(touch)
	  Else 
	  	Window("Menu_Princ_Fen_V11").Type micRight
	  	tapeMicDwn(touch)
	  End If
	  
	  wait patienteur
	  i = i + 1
	  
	Next
	
	'OUVRE LE PROGRAMME DANS LE MENU
	Dim Ligne
	
	
	Ligne = ChoixDeLaLigneV4(prog, sheet) 
	chemin = Ligne
			    
	Environment.Value("chemin_programme") = chemin
			    		
	Window("Menu_Princ_Fen_V11").Type micReturn
	wait 1
	If filiale="SGM" Then
	Window("Menu_Princ_Fen_V11").Type micDwn
	End If
	wait patienteur
	
	
	'FIN DE L'OUVERTURE

End Function

Public Function VerifDoubllibelle_V11(programme, filiale, version, sheet)
Dim intRow, countlibprog, i, patienteur, prog,libelleprog,libprg
	
	patienteur = 1
	countlibprog=1
	
	'COMPTE LE NOMBRE DE LIGNE
	rowCount = DataTable.GetSheet(sheet).GetRowCount
	
	wait patienteur
	
	'RECUPERE LA POSITION DU PROGRAMME ET TROUVER LE DOUBLON DE SES LIBELLES
		
	Ligne = ChoixDeLaLigneV4(programme, sheet) 
	libelleprog=Trim(LCase(Ligne))
	'Parcourir la liste d'arborescence
		For intRow = 1 to rowCount
	
		libprg = DataTable.Value("lprg", sheet)
		libprg = Trim(libprg)
		'nom du programme
		prog = DataTable.Value("mprg", sheet)
		prog = Trim(prog)
		
		'Si nous avons le meme libelle plusieurs fois et avec des noms de programme differents on incremente
		If libprg = libelleprog and prog<>Trim(programme)  Then
			countlibprog=countlibprog+1
			Exit For
		End If
		
		DataTable.GetSheet(sheet).SetNextRow
	Next 
	
VerifDoubllibelle_V11=countlibprog
End Function

Public Function curseurPrincipale()
	'MsgBox touchs
	'REFERME LES SOUS MENU JUSQU'A ATTEINDRE LE PREMIER ELEMENT DU MENU DANS L'ARBORESCENCE
	
	For j = 1 To UBound(touchs) Step 1
		Window("Menu_Princ_Fen_V11").Type micLeft
		wait patienteur
		Window("Menu_Princ_Fen_V11").Type micLeft
		wait patienteur
	Next
	
	Window("Menu_Princ_Fen_V11").Type micHome
End Function



Public Function tapeMicDwn(nbre)
	For j = 1 to Cint(nbre)  Step 1
	  	Window("Menu_Princ_Fen_V11").Type micDwn
	  	wait patienteur
	  		
	Next
End Function 

Public Function LireFiliale ()

	Set Shell = CreateObject("wscript.Shell") 
	Set env = Shell.Environment("Process")
	
	strComputer = env.Item("Computername")
	
	Environment.Value("Computer_Execute") = strComputer
	
	Dim path
	path = "[ALM\Resources] Resources\FichierParametre\PC\"&strComputer
	'path = "D:\Users\11492\Desktop\MPME4S26.xlsx"
	DataTable.ImportSheet path, "Feuil1", "Sheet_ACTION_PRINCIPALE" '"ACTION_PRINCIPALE"
	
	fil = DataTable.Value("filiale", "Sheet_ACTION_PRINCIPALE")   'Filiale
	ver = DataTable.Value("version", "Sheet_ACTION_PRINCIPALE") 'Version
	
'''	fil = DataTable.Value("filiale", "Local")   'Filiale
'''	ver = DataTable.Value("version", "Local") 'Version
				
	LireFiliale = fil&"@"&ver
	

	Set Shell = Nothing
	Set env = Nothing

End Function


Public Function RechercheNpr (progSearch)

	Dim temp
	nbLignes = DataTable.GetSheet("Sheet_ACTION_PRINCIPALE").GetRowCount
	
	For i = 1 to nbLignes

		prog = DataTable.Value("mprg", "Sheet_ACTION_PRINCIPALE")
		prog = Trim(prog)
		
		If progSearch = prog then
		
				nprGlobal = DataTable.Value("nprg", "Sheet_ACTION_PRINCIPALE")   'Numero complet
				
				chemin_prog = DataTable.Value("lprg", "Sheet_ACTION_PRINCIPALE") 'On prends le libellé du programme en même temps
				
				longNpr = Len(nprGlobal)
				
				NbreBloc = longNpr / 2
				
				Dim regroupeprogramme 
				If(Environment.Value("filiale_programme") <> "SGGH") Then 'Juste pour un test pour tester les aborescence sur les V11
					regroupeprogramme = "Menu client,"
				End If
				
				For p = 1 To NbreBloc - 1 Step 1  ' NbreBloc - 1, on prends pas le dernier bloc (qui crspds au libellé du programme) vu qu'on a déjà pris son libellé plus haut
					
					chainebloc = mid(nprGlobal, 1, p*2)
					
					findLibBloc = RechercheLibBloc(chainebloc)
					
					
					regroupeprogramme = regroupeprogramme & findLibBloc  
					
					If(p <> NbreBloc - 1) then
						regroupeprogramme = regroupeprogramme & ","					
					Else 'On a fini on ajoute maintenant le nom du programme			
						regroupeprogramme = regroupeprogramme & "," & chemin_prog
					End If				
					
				 Next
				
			Exit for
			
		End If
		DataTable.GetSheet("Sheet_ACTION_PRINCIPALE").SetNextRow
		
	Next
	
	RechercheNpr = regroupeprogramme & "|" & chemin_prog
	
End Function 


Public Function RechercheLibBloc (chainebloc)

	Dim findLibBloc
	DataTable.GetSheet("Sheet_ACTION_PRINCIPALE").SetCurrentRow(1)
	Dim temp
	nbLignes = DataTable.GetSheet("Sheet_ACTION_PRINCIPALE").GetRowCount
	For i=1 to nbLignes
		temp = DataTable.Value("nprg", "Sheet_ACTION_PRINCIPALE")
		temp = Trim(temp)
		If chainebloc = temp then
		
			chemin = DataTable.Value("lprg", "Sheet_ACTION_PRINCIPALE")
			
			Exit for
			
		End If
		DataTable.GetSheet("Sheet_ACTION_PRINCIPALE").SetNextRow
	Next
	
	RechercheLibBloc = chemin

End Function 



Public Function ChoixDeLaLigneV4(progSearch, sheet)

	Dim temp
	nbLignes = DataTable.GetSheet(sheet).GetRowCount
	For i=1 to nbLignes
		prog = DataTable.Value("mprg", sheet)
		prog = Trim(prog)
		If progSearch = prog then
						
			chemin = DataTable.Value("lprg", sheet)
			
			Exit for
			
		End If
		DataTable.GetSheet(sheet).SetNextRow
	Next
	
	ChoixDeLaLigneV4 = chemin 
	
End Function





Public Function Appel_fenetreV2()
	
'   Tuer_programme_ouvert

	Set sheet_use = DataTable.AddSheet("Sheet_ACTION_PRINCIPALE") 'On cree un sheet temporaire

   retour = split(LireFiliale,"@")
    
    filiale = retour(0)
    version = retour(1)
	
	Environment.Value("filiale_programme") = filiale
	Environment.Value("version_programme") = version	
	
			
	Dim sheet
	sheet = sheet_use.Name'"ACTION_PRINCIPALE"
	
	Dim path
	path = "[ALM\Resources] Resources\FichierParametre\Aborescence_"&filiale
	
	DataTable.ImportSheet path, "Feuil1", sheet
	
	
	Dim temp
	nbLignes = DataTable.GetSheet("Global").GetRowCount
	For i=1 to nbLignes
	
		programme = DataTable.Value("programme", "Global")
		Environment.Value("programme") = programme
		
		If version = "V10" Then
		
			cheminComplet = RechercheNpr(programme)
			
			cheminsplit = split(cheminComplet,"|")
			
			chemin = cheminsplit(0)	
			Environment.Value("chemin_programme_ferme") = chemin
			Environment.Value("chemin_programme") = cheminsplit(1)
			
			If filiale = "" Then
				AccesAuProgrammeV10  chemin
			Else
				AccesAuProgrammeV10Filiale  chemin, filiale
				
				wait 3
			    FermerMenuFilialeV3	filiale, version, chemin
				
			End If
			
		Else
		   If version = "V11" Then
			
				Dim Ligne
			    Ligne = ChoixDeLaLigneV4(programme, "Sheet_ACTION_PRINCIPALE")
			    chemin = Ligne
			    
			    Environment.Value("chemin_programme") = Trim(chemin)
			
				AccesAuProgrammeV12 chemin, programme
				
				wait 1	
			    action = DataTable.Value("action", "Global")
			    RunAction action, oneIteration 'Appel de l action propre
					
			Else
				Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃƒÂ©der au menu demandÃƒÂ©"
			End If
		End If
		DataTable.GetSheet("Global").SetNextRow
	Next
	
	
End Function




'		****** Nom fonction  :		fnCorrigerCharSpe	( V11) -------------------------------------------------------------------------------------------
'		****** Description :		Cette fonction permet de choisir la ligne de la feuille de donnÃ©es Ã  considÃ©rer dans le dÃ©roulement du scripts 	
'		****** ParamÃ¨tres d'entrÃ©e :		strText
'		****** ParamÃ¨tre de sortie :		fnCorrigerCharSpe
'		****** Date de crÃ©ation  : 28/06/2021
'		****** Date de MAJ  : 			
'		****** Description MAJ :

Public Function fnCorrigerCharSpec(strText)
	Dim arrSpecialCharacter
	Dim intCountCom
	Dim arrText()
	Dim i
	Dim charResult
	Dim strResult
	Dim re

	Set re = New RegExp
	With re
		.Global = True
		.Pattern = "\W"
	End With

	Set arrSpecialCharacter = re.Execute(strText)

	intCountCom = Len(strText)
	ReDim arrText(intCountCom - 1)

	For i=1 To intCountCom
		charResult = Mid(strText,i,1)
		Dim strSingleSpecialChar
		
		For Each strSingleSpecialChar In arrSpecialCharacter
			If strSingleSpecialChar.value = " " Then
			ElseIf StrComp(charResult, strSingleSpecialChar.value) = 0 Then
				charResult = Replace(charResult, strSingleSpecialChar.value, "\"&strSingleSpecialChar.value)
				Exit For
			End If
		Next
		arrText(i-1) = charResult
	Next

	strResult = Join(arrText, "")

	fnCorrigerCharSpec = strResult
End Function



'''''''''''''''''''''''Fin Nouveau modèle



Public Function accesAuProgrammePrincipalFilialeV4_test()
	
   Tuer_programme_ouvert

    retour = split(LireFiliale,"@")
    
    filiale = retour(0)
    version = retour(1)
	
	Environment.Value("filiale_programme") = filiale
	Environment.Value("version_programme") = version	
	
	Dim path
	path = "[ALM\Resources] Resources\FichierParametre\Aborescence_"&filiale
	
	DataTable.ImportSheet path, "Feuil1", "ACTION_PRINCIPALE"
	
	programme = DataTable.Value("programme", "Global")
	
		
	If version = "V10" Then
	
		cheminComplet = RechercheNpr(programme)
		
		cheminsplit = split(cheminComplet,"|")
		
		chemin = cheminsplit(0)	
		Environment.Value("chemin_programme_ferme") = chemin
		Environment.Value("chemin_programme") = cheminsplit(1)
		
		If filiale = "" Then
			AccesAuProgrammeV10  chemin
		Else
			AccesAuProgrammeV10Filiale  chemin, filiale
		End If
		
	Else
	   If version = "V11" Then
				
			Dim Ligne
			
		    VerifAborescence = InStr(programme, "#O@u")	
			If (VerifAborescence <> "0") Then
			
				'Pour ressortir le nom du programme
				tabprog = split(programme,"|") 
				name_prog = tabprog(1)	
				
				Ligne = ChoixDeLaLigneV4(name_prog, "Local")
			    chemin = Ligne
			   ' chemin = fnCorrigerCharSpec(chemin)
			    Environment.Value("chemin_programme") = chemin
			    
			    
			    'Maintenant on doit ouvrir le programme
			    chemin_prog = tabprog(0)
			    Ligne = ChoixDeLaLigneV4(chemin_prog, "Local")
			    chemin = Ligne
'			    chemin = fnCorrigerCharSpe(Ligne)
			    
			    Environment.Value("chemin_programme_aborescence") = chemin_prog
			
				AccesAuProgrammeV12 chemin, name_prog
				
				Dim chemin_a_ouvrir
				chemin_a_ouvrir = split(chemin_prog,"#")
				Dim nbr 
				nbr = UBound(chemin_a_ouvrir)
				For i = 1 To nbr - 1 Step 1
				
					Window("Menu_Princ_Fen_V11").Activate
					'Wait 1
					Window("Menu_Princ_Fen_V11").Maximize
					'Wait 1
				    Window("Menu_Princ_Fen_V11").Type  micRight
				    
				    nombre = chemin_a_ouvrir(i)
				    For j = 0 To nombre - 1 Step 1
				    	wait 1
				    	Window("Menu_Princ_Fen_V11").Type  micDwn
				    Next
				 
				Next
				Window("Menu_Princ_Fen_V11").Type  micReturn
				
			else
							
			
			    Ligne = ChoixDeLaLigneV4(programme, "Local")
			    chemin = Ligne
'			    chemin = fnCorrigerCharSpe(Ligne)
			    
			    if(trim(ligne)="")then
			    	Reporter.ReportEvent micFail, "Execution KO", programme & " Programme introuvable"
			    	EndTest micPass, "Test KO ", "KO"  
			    else
			    'chemin = fnCorrigerCharSpec(chemin)
			    Environment.Value("chemin_programme") = chemin
			
				AccesAuProgrammeV12 chemin, programme
				chemin = fnCorrigerCharSpec(chemin)
			    Environment.Value("chemin_programme") = chemin
				End If
				
			End If
			
		Else
			Reporter.ReportEvent micFail, "Menu KO", "Impossible d'accÃƒÂ©der au menu demandÃƒÂ©"
		End If
	End If
	
	
	
End Function


Public Function Confirmation(p)
	If Window("Confirmation").Exist Then
			Window("Confirmation").Activate
			If p=1 Then
				wait 1
			  Window("Confirmation").Type " "
			Else
			  wait 1
			   Window("Confirmation").Type micTab
			  wait 1
			  Window("Confirmation").Type " "
			End If
	End If
End Function




'--------------------------WinScp

Public Function OpenWinScp()

			filiale = Environment.Value("filiale_programme")
			
			
			If(filiale <> "SGB") and (filiale <> "SGBF") Then 'En attendant
				
				'     Dim FenetreWinscp
				'     Dim FenetreLogin 
				'     Dim NomHote 
				'     Dim Port 
				'     Dim Utilisateur 
				'     Dim Password 
				'     Dim Protocole 
				'     Dim CheminRepertoire 
				'     Dim FenetreRepertoire 
				'     Dim OuvrirRepertoire 
				
				    Set objExcel = CreateObject("Excel.Application")
'				    Set objWorkbook = objExcel.Workbooks.Open("D:\SHARED\SheetWinscp.xlsx")
				    
				    hostname = Environment.Value("Computer_Execute")
	                    	    debut_Hostname = Mid(hostname,1,2)
	                                                                   
	                        If debut_Hostname = "FR" Then
	                      		Set objWorkbook = objExcel.Workbooks.Open("\\Client\D$\SHARED\SheetWinscp.xlsx")
	                        Else 
	                          	Set objWorkbook = objExcel.Workbooks.Open("D:\SHARED\SheetWinscp.xlsx")
	                        End If

				    Set objSheet = objWorkbook.Worksheets("Feuil1")
				''    ColCount = objSheet.UsedRange.Columns.Count
				''    RowCount = objSheet.UsedRange.Rows.Count
				
				             FenetreWinscp = objSheet.Cells(1,1)
				             FenetreLogin = objSheet.Cells(1,2)
				             NomHote = objSheet.Cells(1,3)
				             Port = objSheet.Cells(1,4)
				             Utilisateur = objSheet.Cells(1,5)
				             Password = objSheet.Cells(1,6)
				             Protocole = objSheet.Cells(1,7)
				             CheminRepertoire = objSheet.Cells(1,8)
				             FenetreRepertoire = objSheet.Cells(1,9)
				             OuvrirRepertoire = objSheet.Cells(1,10)
				             F_Filtre = objSheet.Cells(1,11)
							 F_Confirm = objSheet.Cells(1,12)
				
				
				        
				        InvokeApplication("C:\Program Files (x86)\WinSCP\WinSCP.exe") 'Ouverture Winscp
						wait 1
						
						Dim fenetreW
						Set fenetreW = Window("WinScp")
						
						fenetreW.SetTOProperty "text", FenetreWinscp
						
						 If fenetreW.Exist Then
						    
						    Reporter.ReportEvent micPass, "************* Ouverture de l'application WinSCP   OK ",  "success"	
						        
						    Dim fenetreLog
							Set fenetreLog = fenetreW.Window("Login")
							
							fenetreLog.SetTOProperty "text", FenetreLogin
							
							If fenetreLog.Exist Then
								Reporter.ReportEvent micPass, "************* Ouverture de la fenetre de connexion   OK ",  "success"	
								'fenetreLog.Activate
								
								
								
								VerifConnecte = fenetreLog.GetVisibleText
							
								
								VerifDejaNew = InStr(VerifConnecte, "Nouveau Site")
								
								If (VerifDejaNew <> "0") Then
									
										VerifDejaConnecte = InStr(VerifConnecte, "@")
								
										If(VerifDejaConnecte = "0") Then 'Si n ya pas de connexion enregistré
										
											wait 2
											fenetreLog.Type micShiftDwn +  micTab  + micShiftUp
											
										Else 'Si ya des connexion enregistré
										
											If fenetreLog.WinObject("TEdit_2").Exist Then 'Le focus n'est pas sur une connexion existante
						   				   	
							         			    					    					
						    				Else  'Le focus est sur une connexion existante
						    				
						    					fenetreLog.Type micHome 
						         				wait 3
						         				
											End If
										
												fenetreLog.Type micTab
						         				wait 1
						         				fenetreLog.Type micTab
						         				wait 1
						         				fenetreLog.Type micTab		
										End If
								
								Else 'Apres la maj l'interface winscp a changé
								
									'En attendant d'avoir toutes les iterations
									wait 2
									fenetreLog.Type micShiftDwn +  micTab  + micShiftUp
										
								End If
								
								
								
										wait 1
										fenetreLog.Type Protocole
										fenetreLog.Type micTab
											
										wait 2
										fenetreLog.Type NomHote
										fenetreLog.Type micTab
											
										wait 2
										fenetreLog.Type Port
										fenetreLog.Type micTab
											
										wait 2
										fenetreLog.Type Utilisateur
										fenetreLog.Type micTab
											
										wait 2
										fenetreLog.Type Password
										fenetreLog.Type micTab
											
										wait 2
										fenetreLog.Type micTab
											
										wait 1
										fenetreLog.Type micTab
											
										wait 1
										fenetreLog.Type micReturn
										wait 20
									
									
									
								Dim fenetreWinscp_Connect
								Set fenetreWinscp_Connect = Window("WinSCP_Connect")
								
						'		fen = Utilisateur&"@"&NomHote
						'		fenetreWinscp_Connect.SetTOProperty "text", fen
										
								 If fenetreWinscp_Connect.Exist(60) Then
								 
								 	fenetreWinscp_Connect.Activate
								 	wait 2
								 	
								 	
									fenetreWinscp_Connect.WinObject("TUnixDirView").Click 253,91
									
								 	wait 1
									fenetreWinscp_Connect.Type micCtrlDwn + "l" + micCtrlUp
								 	
														
														
									wait 3
									VerifRepertoire = fenetreWinscp_Connect.GetVisibleText
														
									wait 1
									VerifRepertoireExist = InStr(VerifRepertoire, OuvrirRepertoire)
									
									wait 1
									IF(VerifRepertoireExist <> "0") Then 
										
										Dim fenetreWinscp_OuvrirRepertoire
										Set fenetreWinscp_OuvrirRepertoire = fenetreWinscp_Connect.Window("Repertoire")
										fenetreWinscp_OuvrirRepertoire.SetTOProperty "text", "^.*" & OuvrirRepertoire & ".*"
										
										If(fenetreWinscp_OuvrirRepertoire.Exist) then 
											fenetreWinscp_OuvrirRepertoire.Activate
											wait 1
											fenetreWinscp_OuvrirRepertoire.Type CheminRepertoire
									
											wait 4
											fenetreWinscp_OuvrirRepertoire.Type micReturn
											
											wait 3
											
										
										End If
										
									Else 
									
										
										'Ce code a ete rajouté
										Dim fenetreWinscp_OuvrirRep
										Set fenetreWinscp_OuvrirRep = fenetreWinscp_Connect.Window("OuvRep")
										
										If(fenetreWinscp_OuvrirRep.Exist(8)) then 
											fenetreWinscp_OuvrirRep.Activate
											wait 1
											fenetreWinscp_OuvrirRep.Type CheminRepertoire
									
											wait 4
											fenetreWinscp_OuvrirRep.Type micReturn
											
											wait 3
										'--------------------------------------------
										Else
										
											Dim fenetreWinscp_EmplacementRepertoire
											Set fenetreWinscp_EmplacementRepertoire = fenetreWinscp_Connect.Window("EmplacementProfils")
											fenetreWinscp_EmplacementRepertoire.SetTOProperty "text", FenetreRepertoire
											
											If(fenetreWinscp_EmplacementRepertoire.Exist) then 
												
												fenetreWinscp_EmplacementRepertoire.Activate
												wait 1
												fenetreWinscp_EmplacementRepertoire.Type CheminRepertoire
												wait 4
												fenetreWinscp_EmplacementRepertoire.Type micReturn
												wait 3
											
										    End If
											
										
										End If 
									
												
									End If
									
									'Pour SGBG et SGCAM on connait à l'avance le nom du fichier
									If ( (DataTable.Value("filiale", "Local") = "SGBG") or (DataTable.Value("filiale", "Local") = "SGCAM") or (DataTable.Value("filiale", "Local") = "SGT") or (DataTable.Value("filiale", "Local") = "SGGH") or (DataTable.Value("filiale", "Local") = "SGC") )  Then
									
										fenetreWinscp_Connect.WinObject("TUnixDirView").Type micCtrlDwn + micAltDwn + "f" + micAltUp + micCtrlUp
										
										wait 1
																
										Dim fenetreFilter
										Set fenetreFilter = fenetreWinscp_Connect.Window("Filtrer")
										
										ChangerFenetre fenetreFilter, F_Filtre
										
						 				If fenetreFilter.Exist Then
						 				
						 						wait 2	
												
												If((DataTable.Value("filiale", "Local") = "SGBG"))Then 
													namefile = Mid(Utilisateur, 5, 4)
												End If
												
												
												If((DataTable.Value("filiale", "Local") = "SGCAM"))Then 
													namefile = Mid(Utilisateur, 5, 4)
												End If
												
												If((DataTable.Value("filiale", "Local") = "SGC"))Then 
													namefile = "info.txt"
												End If
												
												
												If((DataTable.Value("filiale", "Local") = "SGGH"))Then
												
													
													DateNow = DateAdd("h", "1", Now() )
													
													DateNow = DateAdd("n", "-3", DateNow )
													
													namefile = "*"&Utilisateur&"*>"&myDateFormat(DateNow)
												End If

						 						
						 						wait 2
						 						fenetreFilter.Type namefile
						 						fenetreFilter.Type micTab
						 						wait 1
						 						fenetreFilter.Type micReturn
						 						wait 1
						 						
						 								 						
						 						OuvreFichier fenetreWinscp_Connect,namefile
						 						
						 				End If
									
									Else
									
										DateSelected_Line = TrieTableau(fenetreWinscp_Connect)  'Methode trie du tableau et qui retourne la date la plus recente du repertoire
									
										'DateNow = Now()
										DateNow = DateAdd("h", DataTable.Value("Decalage_horaire", "Local"), Now() ) 'La date du moment + le decalage horaire
										
										Difference_Date =  CLng(DateDiff("n",DateSelected_Line,DateNow))
										Interval = CLng(DataTable.Value("DifferenceMinute", "Local"))
										
										If ( Difference_Date <= Interval ) Then
											
											OuvreFichier fenetreWinscp_Connect,""
										
										Else 'Le fichier n'a pas ete generé 
											
											MSGBOX "Le delai de prise en compte du fichier est passé"
											
										End If
									
									
									End If
									
									
									
										
								End If
							
							End If
						    
						 End If
						 
						 
						   Set objSheet  = Nothing
						   Set objWorkbook = Nothing
						   Set objExcel = Nothing
				
				
			
			End If
			

		 
End Function


Public Function OuvreFichier(fenetreWinscp_Connect, FileName)

				wait 1
				fenetreWinscp_Connect.WinObject("TUnixDirView").Type micHome
				wait 1
				fenetreWinscp_Connect.WinObject("TUnixDirView").Type micDwn
				
				If( (Environment.Value("filiale_programme") = "SGT") or (Environment.Value("filiale_programme") = "SGC") )Then 
					wait 1
					fenetreWinscp_Connect.WinObject("TUnixDirView").Type micDwn
				End If
				
				wait 1
				fenetreWinscp_Connect.WinObject("TUnixDirView").Type micReturn
				
				cpt = 0
				Do While not Window("editeurWinScp").Exist 
				wait 1
				cpt = cpt + 1
				If cpt=5 Then
					Exit Do
				End If
				Loop
				
'''''''				Dim fenetreApercu
'''''''				Set fenetreApercu = Window("ApercuNotePad")
'''''''				
'''''''				fenetreApercu.SetTOProperty "text", FileName
'''''''				If(fenetreApercu.Exist) then 
'''''''					fenetreApercu.Activate
'''''''				End If
				
				wait 2
				fenetreWinscp_Connect.Activate
				
				
				wait 2
				fenetreWinscp_Connect.Type micF10
				wait 1
						
						
				'On va fermer notre Fn de confirmation 
				Dim fenetreWinscpFerme
				Set fenetreWinscpFerme = fenetreWinscp_Connect.Window("Confirmer")
						
				ChangerFenetre fenetreWinscpFerme, F_Confirm
						
		 		If fenetreWinscpFerme.Exist Then
		 			fenetreWinscpFerme.Activate
					wait 1
					fenetreWinscpFerme.Type micReturn
					wait 1
		 		End If
		 		
End Function



Public Function TrieTableau(fenetreWinscp_Connect)
						
						wait 2
						fenetreWinscp_Connect.WinObject("TUnixDirView").Click 253,91
						
						wait 1
						fenetreWinscp_Connect.Type micCtrlDwn + micF5 + micCtrlUp 'On range par date de modification
					
						wait 1
						ContenuRepertoire = fenetreWinscp_Connect.WinObject("TUnixDirView").GetVisibleText 'On recupere le contenu du repertoire
						
						wait 1
						Tableau = split(ContenuRepertoire,VbCr)
						
						'wait 1						
						'nbre_Tableau_debit = UBound(Tableau)
						
						cpt = 0
						For j = 0 To UBound(Tableau)
							
							If( isdate(Tableau(j)) ) Then
							
								cpt = cpt + 1
								
								If(cpt = "2") Then
									
									ModiFirst_Line = Tableau(j) 'On recupere la date de modification du fichier de la premiere ligne
'									ModiFirst_Line = REPLACE(ModiFirst_Line,Chr(10),"")
'									ModiFirst_Line = REPLACE(ModiFirst_Line,chr(13),"")
									
								End If
								
								If(cpt = "3") Then
									
									ModiSecond_Line = Tableau(j) 'On recupere la date de modification du fichier de la 2nd ligne
'									ModiSecond_Line = REPLACE(ModiSecond_Line,Chr(10),"")
'									ModiSecond_Line = REPLACE(ModiSecond_Line,chr(13),"")
									
									Exit For
									
								End If
							
							End If
							
						Next
						
						Wait 1
						
						If (cpt = "1") Then 'Le dossier est vide
							
							
						ElseIf (cpt = "2") Then ' On a un seul fichier dans le repertoire
							
							TrieTableau = DateModiFirst_Line
						
						ElseIf (cpt = "3") Then 'On a plus d'un fichier dans le repertoire
						
							DateModiFirst_Line = CDate(ModiFirst_Line)
							DateModiSecond_Line = CDate(ModiSecond_Line)
									
							If (DateModiFirst_Line < DateModiSecond_Line) Then'le tableau n'est pas rangé par odre decroissant
										
								TrieTableau = TrieTableau(fenetreWinscp_Connect)
										
							Else
										
								TrieTableau = DateModiFirst_Line
										
							End If
						
						End If


End Function


'------------------------Fin WinScp



'------------------------Programme cbconseve
Public Function OpenCbconseve()
		
		 
		Set sheet_use = DataTable.AddSheet("Sheet_Cbconserve") 'On cree un sheet temporaire
		wait 3
		accesAuProgrammecbconseve "cbconseve", sheet_use.Name


		Dim fenetreProgramme, expReg
		Set fenetreProgramme = Window("cbconseve_Fn")


		
		'Récupération de l'expression régulière
		expReg = Environment.Value("chemin_programme") 
		
		'Changer de fenêtre en mettant la bonne expression régulière dans la propriété text de l'objet
		expReg = fnCorrigerCharSpec(expReg)
		ChangerFenetre fenetreProgramme, expReg

        If (fenetreProgramme.Exist) Then
		    
		    '-Log
			Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
		    
		    'Verification d'existance de la fenetre du formulaire
			fenetreProgramme.Activate
		    
		    fenetreProgramme.Maximize
		    
			Dim nbLignes
		    nbLignes = DataTable.GetSheet("Local").GetRowCount
				
							
				filiale_check = DataTable.Value("filiale", "Local")
				filiale_check = Trim(filiale_check)
					
				filiale = Environment.Value("filiale_programme")
		
		
		       'corps ou Main 
				If filiale_check = filiale then
			
			      	fenetreProgramme.Activate
					''-Log
					Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
					
					
					fenetreProgramme.Maximize
					wait 3
					
					fenetreProgramme.Type DataTable ("Agence", dtLocalSheet)
					wait 1
					fenetreProgramme.Type micTab
					wait 1
					'fenetreDialogue.Type DataTable ("Operation", dtLocalSheet)
					'FEN DE RECHERCHE
					fenetreProgramme.Type micF4
					wait 3
	
					'''''
					
					
					
				
				
					Dim fenetreSearch, expSearch
					Set fenetreSearch = Window("Recherche_Des_Opérations")


'							expSearch = Trim(DataTable("fenetreSearch",dtLocalSheet)) 
							expSearch = DataTable("fenetreSearch",dtLocalSheet)
					  
							ChangerFenetre fenetreSearch, expSearch
								
							If(fenetreSearch.Exist(2))Then 
								filsExist = 1
							Else
							
								If filiale="SGGH" Then
								
									Set fenetreSearch = Window("Fn_Operation_search")
	
									ChangerFenetre fenetreSearch, expSearch
									
									If(fenetreSearch.Exist(2))Then 
										filsExist = 1
									End If
									
								ElseIf filiale="SGBF" or filiale="SGC" Then
									
									Set fenetreSearch = Window("Recherche_des_opérations_SGBF")
									
									ChangerFenetre fenetreSearch, expSearch
									
									If(fenetreSearch.Exist(2))Then 
										filsExist = 1
									End If
								Else  
									Set fenetreSearch = Window("Fn_Recherche_des_operations")
	
									ChangerFenetre fenetreSearch, expSearch
									
									If(fenetreSearch.Exist(2))Then 
										filsExist = 1
									End If
								End If
				
												
							End If
							
'								If (fenetreSearch.Exist(2)) Then
								If (filsExist = 1) Then
			    						fenetreSearch.Activate
			    						wait 0,5
			    						fenetreSearch.Maximize
			    						wait 0,5
									fenetreSearch.Type DataTable ("Nature", dtLocalSheet)
									wait 1
									fenetreSearch.Type micTab
									wait 1
									fenetreSearch.Type DataTable ("Operation", dtLocalSheet)
									wait 1
									fenetreSearch.Type micTab
									wait 1
									fenetreSearch.Type DataTable ("Caisse", dtLocalSheet)
									wait 1
									fenetreSearch.Type micTab
									wait 1
									fenetreSearch.Type DataTable ("UserCbconseve", dtLocalSheet)
									wait 1
									fenetreSearch.Type micTab
									wait 1
									fenetreSearch.Type DataTable ("Client", dtLocalSheet)
									wait 1
									fenetreSearch.Type micTab
									wait 1
									fenetreSearch.Type DataTable ("Etat", dtLocalSheet)
									wait 1
									fenetreSearch.Type micTab
									wait 1
									fenetreSearch.Type DataTable ("Evenement", dtLocalSheet)
									wait 1
								    fenetreSearch.Type micTab
									wait 2
									
									
									'------On verifie pour voir s'il ya une ligne affiché
									fenetreSearch.Click 394, 450, micRightBtn
									
									Wait 1
									Retour = fenetreSearch.GetVisibleText
									wait 1
									VerifRetour = InStr(Retour, "Find")
									wait 1
									fenetreSearch.Click 371,460
									wait 1
									IF(VerifRetour <> "0") Then 
										fenetreSearch.Type micReturn
									Else
										fenetreSearch.Type micF3
									End If
									'----------------Fin verification retour
									
									wait 1
			    					
			    				End If
					
					wait 1
					fenetreProgramme.Type micTab
					wait 3
					
					
					IF(VerifRetour <> "0") Then 'On a des lignes dans la grille
					
''''''''''							'----------------------reinitialiser la taille des colonnes du tableau
''''''''''							fenetreProgramme.InsightObject("ColEvenement").Click
''''''''''							
''''''''''							wait 1
''''''''''							fenetreProgramme.InsightObject("ColEvenement").Click 0,0, micRightBtn
''''''''''							
''''''''''							wait 1
''''''''''							fenetreProgramme.Type micUp
''''''''''							
''''''''''							wait 1
''''''''''							fenetreProgramme.Type micUp
''''''''''							
''''''''''							wait 1
''''''''''							fenetreProgramme.Type micReturn
''''''''''							'----------------------fin reinitialiser la taille des colonnes du tableau
''''''''''							
''''''''''							
''''''''''							'----------------------reinitialiser l'ordre de tri du tableau
''''''''''							wait 1
''''''''''							fenetreProgramme.InsightObject("ColEvenement").Click
''''''''''							
''''''''''							wait 1
''''''''''							fenetreProgramme.InsightObject("ColEvenement").Click 0,0, micRightBtn
''''''''''							
''''''''''							wait 1
''''''''''							fenetreProgramme.Type micUp
''''''''''							
''''''''''							wait 1
''''''''''							fenetreProgramme.Type micReturn
''''''''''							'----------------------fin reinitialiser l'ordre de tri du tableau
							
							
							wait 1
							fenetreProgramme.Type micRight 
							
							wait 1
							fenetreProgramme.Type micRight 
							wait 1
							
							
							If(filiale = "SGGH") Then 
								If(fenetreProgramme.InsightObject("ColDate_SGGH_3").Exist(2)) Then 
									fenetreProgramme.InsightObject("ColDate_SGGH_3").Click
								Else
									fenetreProgramme.InsightObject("ColDate_SGGH").Click
								End If
							Else
							
								If fenetreProgramme.InsightObject("ColDate").Exist(2) Then
									fenetreProgramme.InsightObject("ColDate").Click
								else
									If(InsightObject("ColDate_2").Exist(2)) Then
										InsightObject("ColDate_2").Click
									Else 
										fenetreProgramme.InsightObject("ColDate_3").Click
									End If
									
								End If
								
							End If
							'fenetreProgramme.InsightObject("ColDate").Click
							'--------------Recup premiere date du tableau
							wait 1
							fenetreProgramme.Type micHome 
							wait 1
							fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
							
							wait 1
							Set objCopy= CreateObject("Mercury.Clipboard")
							ligne = objCopy.GetText
							
							longueur_ligne = LEN(ligne)
							
							Date1 = Mid(ligne,longueur_ligne - 38,19)
							objCopy = null
							'--------------Fin Recup---------------------
							
							wait 1
							fenetreProgramme.Type micDwn

							'--------------Recup 2eme date du tableau
							wait 1
							fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
							
							wait 1
							Set objCopy= CreateObject("Mercury.Clipboard")
							ligne = objCopy.GetText
							
							longueur_ligne = LEN(ligne)
							
							Date2 = Mid(ligne,longueur_ligne - 38,19)
							objCopy = null
							'--------------Fin Recup---------------------
							
							If(Date1 < Date2) Then 
								wait 1
								fenetreProgramme.Type micEnd
							Else 
								fenetreProgramme.Type micHome
							End If
							

''''							wait 1
''''							fenetreProgramme.Type micRight 
''''							
''''							wait 1
''''							fenetreProgramme.Type micRight 
							
							wait 1
							fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
							
							wait 1
							Set objCopy= CreateObject("Mercury.Clipboard")
							ligne = objCopy.GetText
							
							longueur_ligne = LEN(ligne)
							
							DateVerif = Mid(ligne,longueur_ligne - 38,19) 
							
						    NowDate = DateAdd("n", DataTable.Value("DecalageHoraire", "Local"), Now())
						    
							Difference_Date =  CLng(DateDiff("s",DateVerif,NowDate))
							DifferenceSeconde = CLng(DataTable.Value("DifferenceSeconde", "Local"))
							
							If ( Difference_Date <= DifferenceSeconde ) Then
								
								Tableau_ligne = split(ligne,chr(9))
								Environment.Value("Num_Evenement") = TRIM(Tableau_ligne(2))
								
								fenetreProgramme.Type micReturn
								wait 5
								fenetreProgramme.Type micReturn
								wait 1
								For Iterator = 1 To 2 Step 1
									fenetreProgramme.Type micF3
								Next
								
							Else 'Ce n'est pas le bon evenement
									
								MSGBOX "Le delai de prise en compte du fichier est passé"
								
								For Iterator = 1 To 2 Step 1
									fenetreProgramme.Type micF3
								Next 	
							End If
							
										
		''''					Dim absX : absX = fenetreProgramme.InsightObject("ColEvenement").GetROProperty("abs_x")
		''''    				Dim absY : absY = fenetreProgramme.InsightObject("ColEvenement").GetROProperty("abs_y")
		''''					
		''''					Dim width : width = fenetreProgramme.InsightObject("ColEvenement").GetTOProperty("width")
		''''					Dim height : height = fenetreProgramme.InsightObject("ColEvenement").GetTOProperty("height")
		''''					Dim x : x = (absX + (width /2))
		''''					Dim y : y = (absY + (height /2))
					
					
					Else 
					
						For Iterator = 1 To 2 Step 1
							fenetreProgramme.Type micF3
						Next 
						
					End If
					
				End If

		           		        
			
			
		Else
				Reporter.ReportEvent micFail, " : Fenêtre introuvable", "echec"
		End If

End Function


Public Function accesAuProgrammecbconseve(programme, sheet)
	
    'Tuer_programme_ouvert
   
    retour = split(LireFilialecbconseve(sheet),"@")
    
    filiale = retour(0)
    version = retour(1)
	
	Environment.Value("filiale_programme") = filiale
	Environment.Value("version_programme") = version	
	
	Dim path
	path = "[ALM\Resources] Resources\FichierParametre\Aborescence_"&filiale
	DataTable.ImportSheet path, "Feuil1", sheet
	

	OuvreProgramme programme, filiale, version, sheet
	
	
End Function




Public Function LireFilialecbconseve (sheet)

	Set Shell = CreateObject("wscript.Shell") 
	Set env = Shell.Environment("Process")
	
	
	strComputer = env.Item("Computername")
	
	Environment.Value("Computer_Execute") = strComputer
	
	Dim path
	path = "[ALM\Resources] Resources\FichierParametre\PC\"&strComputer
	
	DataTable.ImportSheet path, "Feuil1", sheet
	
	DataTable.SetCurrentRow(1)
	
	fil = DataTable.Value("filiale", sheet)   'Filiale
	ver = DataTable.Value("version", sheet) 'Version
				
	LireFilialecbconseve = fil&"@"&ver
	

	Set Shell = Nothing
	Set env = Nothing

End Function

'------------------------Fin programme cbconseve	



'------------------------Programme oigesswf
Public Function OpenOigesswf()
		
		 
		Set sheet_use = DataTable.AddSheet("Sheet_oigesswf") 'On cree un sheet temporaire
		wait 3
		accesAuProgrammecbconseve "oigesswf", sheet_use.Name
		
		Dim fenetreProgramme, expReg
		Set fenetreProgramme = Window("Fen_oigesswf")
		
		'Récupération de l'expression régulière
		expReg = Environment.Value("chemin_programme") 
		
		'Changer de fenêtre en mettant la bonne expression régulière dans la propriété text de l'objet
		expReg = fnCorrigerCharSpec(expReg)
		ChangerFenetre fenetreProgramme, expReg
		
		If (fenetreProgramme.Exist) Then
		    
		    '-Log
			Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
		    
		    'Verification d'existance de la fenetre du formulaire
			fenetreProgramme.Activate
		    
		    fenetreProgramme.Maximize
		    
			Dim nbLignes
		    nbLignes = DataTable.GetSheet("Local").GetRowCount
				
							
			filiale_check = DataTable.Value("filiale", "Local")
			filiale_check = Trim(filiale_check)
				
			filiale = Environment.Value("filiale_programme")
		
		
		    'corps ou Main 
			If filiale_check = filiale then
			
				'Choix du bouton entrée ou sortie
				fenetreProgramme.Type micTab
				wait 1
				fenetreProgramme.Type micReturn
				wait 1
				
				'Choix du bouton Modif ou Interro
				fenetreProgramme.Type micTab
				wait 1
				fenetreProgramme.Type micReturn
				wait 1
				
				fenetreProgramme.Type  micDel
				fenetreProgramme.Type DataTable ("Agence", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("TypeMessage", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("ChronoDu", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("ChronoAu", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("BanqueDest_1", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("BanqueDest_2", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("BanqueDest_3", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("MessageDu", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("MessageAu", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type "   "
				wait 1
				Modul = DataTable ("Module", dtLocalSheet)
				
				'--------------------------------------------------
				Do 
				
					fenetreProgramme.Type micDwn
					wait 1
					fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
					Set objCopy= CreateObject("Mercury.Clipboard")
					ligne = objCopy.GetText
				Loop While (Trim(ligne) <> Trim(Modul))
				
				objCopy = null
				'--------------------------------------------------		
							
'				fenetreProgramme.Type Modul
'				wait 1
				fenetreProgramme.Type  micReturn
				wait 1
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("TypeDossier", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type Environment.Value("Etranger_Num_Dossier")
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type DataTable ("Montant", dtLocalSheet)
				fenetreProgramme.Type micTab
				wait 1
				
				fenetreProgramme.Type micEsc
				wait 6
				
				RetourRecherche = fenetreProgramme.GetVisibleText
				wait 1
				VerifRetour = InStr(RetourRecherche, "Aucun")
				wait 1
				
				
				If(VerifRetour <> "0") Then 
					
					fenetreProgramme.Type micReturn
'''					wait 1
'''					fenetreProgramme.Type micF3
'''					wait 1
'''					fenetreProgramme.Type micF3
'''					wait 1
'''					fenetreProgramme.Type micF3
'''					wait 1
'''					fenetreProgramme.Type micF3

					Do
							    fenetreProgramme.Type micF3
							    wait 2
							Loop While(fenetreProgramme.Exist(2))
							
					EndTest micFail,"KO: Aucun dossier trouvé","Echec"	
					
					
					
				Else
				
					'--------------Recup premiere ligne
					wait 1
					fenetreProgramme.Type micHome 
					wait 1
					fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
							
					wait 1
					Set objCopy= CreateObject("Mercury.Clipboard")
					ligne = objCopy.GetText
					
					
'''''''					If (Modul = "Transfert") Then 
'''''''						
'''''''						VerifTrans = InStr(ligne, "TR")
'''''''						wait 1
'''''''						
'''''''						If(VerifTrans <> "0") Then 
'''''''							
'''''''							AfficheMessage fenetreProgramme
'''''''
'''''''							Do
'''''''							    fenetreProgramme.Type micF3
'''''''							    wait 2
'''''''							Loop While(fenetreProgramme.Exist(2))
'''''''								
'''''''						Else
'''''''						
'''''''							EndTest micFail,"KO: Le dossier n'est pas au statut Transmis","Echec"	
'''''''						
'''''''						End If
'''''''					
'''''''					Else
						
						VerifTrans = InStr(ligne, "TR")

						wait 1
						
						If(VerifTrans <> "0")  Then 
							
							AfficheMessage fenetreProgramme
							
							Do
							    fenetreProgramme.Type micF3
							    wait 2
							Loop While(fenetreProgramme.Exist(2))
							
							
							
						Else
						
							EndTest micFail,"KO: Le dossier n'est pas au statut Transmis","Echec"	
						
						End If
					
''''					End If
					
					
					objCopy = null
					'--------------Fin Recup ligne---------------------
				
				End If
							
				
			End If
		
		End If

End Function



Public Function AfficheMessage(fenetreProgramme)


	fenetreProgramme.Type  micF10 
	wait 1
	
	Dim fenetreDetail, expDetailMessage
	Set fenetreDetail = fenetreProgramme.Window("Detail")
		
	expDetailMessage = DataTable ("DetailMessage", dtLocalSheet) 
	
	ChangerFenetre fenetreDetail, expDetailMessage
		
	If (fenetreDetail.Exist) Then
	
		fenetreDetail.Maximize
		wait 2
		fenetreDetail.Type micF3
		
	End If

End Function

'------------------------Fin Programme oigesswf






'------------------------Programme oivalid
Public Function BontonExist()

	BontonExist = "Transferts;Rapatriements;Portef.Import;Portef.Export;CredocImport;CredocExport;Dom.import;Dom.export;MCNE;Nivellement;TsDossier;Demandefr;FraisMT190"
	
End Function

Public Function BontonExist_SGGH()

	BontonExist_SGGH = "Transfers;Repatriations;Importportfoli;Exportdoc.col;ImportL/C;ExportL/C;Discounto;Levelling;Spotexchange;Requestfo"
	
End Function


Public Function BontonExist_SGM()

	BontonExist_SGM = "Transferts;Rapatriements;Portef.Import;Portef.Export;CredocImport;CredocExport;Dom.import;Dom.export;MCNE;Nivellement;Fin"
	
End Function


Public Function BontonExist_SGBF()

	BontonExist_SGBF = "Transferts;Rapatriements;Portef.Import;Portef.Export;CredocImport;CredocExport;Dom.import;Dom.export;MCNE;Nivellement;Fin"
	
End Function


Public Function OpenOivalid()
		
		CpteValidation = 0
		
		
		Set sheet_use = DataTable.AddSheet("Sheet_oivalid") 'On cree un sheet temporaire
		wait 3
		accesAuProgrammecbconseve "oivalid", sheet_use.Name
		
		Dim fenetreProgramme, expReg
		expReg=fnCorrigerCharSpec(expReg)
		Set fenetreProgramme = Window("Fen_oivalid")
		
		'Récupération de l'expression régulière
		expReg = Environment.Value("chemin_programme") 
		
		'Changer de fenêtre en mettant la bonne expression régulière dans la propriété text de l'objet
		expReg = fnCorrigerCharSpec(expReg)
		ChangerFenetre fenetreProgramme, expReg
		
		If (fenetreProgramme.Exist) Then
		
			 '-Log
			Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
		    
		    'Verification d'existance de la fenetre du formulaire
			fenetreProgramme.Activate
		    
		    'fenetreProgramme.Maximize
		    
			Dim nbLignes
		    nbLignes = DataTable.GetSheet("Local").GetRowCount
				
							
			filiale_check = DataTable.Value("filiale", "Local")
			filiale_check = Trim(filiale_check)
				
			filiale = Environment.Value("filiale_programme")
		
		    'corps ou Main 
			If filiale_check = filiale then
				
				fenetreProgramme.Click 657, 379, micRightBtn
				'fenetreProgramme.Click 500, 119, micRightBtn				
				wait 1
		       		          
				RecupData = fenetreProgramme.GetVisibleText	
		        wait 1
				
				fenetreProgramme.Click 647, 379
				wait 1
				
				If(filiale = "SGGH") Then
					Data_Tree = split(RecupData,"Choice")
				ElseIf(filiale = "SGBF") Then
					Tab = "Choix"&VbCr&"Transferts"&VbCr&"Rapatriements"&VbCr&"Portef. Import"&VbCr&"Portef. Export"&VbCr&"Credoc Import"&VbCr&"Credoc Export"&VbCr&"Dom. import"&VbCr&"Dom. export"&VbCr&"Fin"
					Data_Tree = split(Tab,"Choix")
				Else
					Data_Tree = split(RecupData,"Choix")
				End If
				
				
				
				nbre_Data_Tree = UBound(Data_Tree)
				
				Choix_Tree = Data_Tree(1)
				
				Table_Choix_Tree = split(Choix_Tree,VbCr)
				Nbre_Table_Choix_Tree = UBound(Table_Choix_Tree)
				wait 1
				
				
				
				'-----On check les bonnes positions--------------'
				If(filiale = "SGBG" or filiale="SGC")  Then
					Table_Action = split(BontonExist,";")
				End If
				
				If(filiale = "SGGH") Then
					Table_Action = split(BontonExist_SGGH,";")
				End If
				
				If(filiale = "SGM") Then
					Table_Action = split(BontonExist_SGM,";")
				End If
				
				If(filiale = "SGBF") Then
					Table_Action = split(BontonExist_SGBF,";")
				End If
				
				Nombre_Good_Action = 0
				'-----Fin check--------------'
			    
			    
			    action = DataTable("ChoixAction", dtLocalSheet)
			    
				For j = 0 To Nbre_Table_Choix_Tree Step 1    'Choix de l'action
				
					BoutonIn = 0
					
				
				    Chaine = Table_Choix_Tree(j)
			    	ChaineSP = Replace(Replace(trim(Chaine)," ",""),VbCr,"")
			    	wait 0,5
			    	
			    	
			    	'--------------------Verification que le bouton est dans la liste des boutons
			    	For jap = 0 To UBound(Table_Action) Step 1
			    	
			    	Action_Table_Action = Table_Action(jap)
			    	
			    	'wait 1
			    	
			    			If (InStr(ChaineSP, Trim(Action_Table_Action))) Then 'On a trouvé le bouton de l'action
			    			
			    				BoutonIn = 1
			    				Nombre_Good_Action = Nombre_Good_Action +1
			    				
			    				Exit For
			    			End If
			    	Next
			    	'--------------------Fin verification que le bouton est dans la liste des boutons
			    	
			    	
			    	If BoutonIn = 1 Then 'verif que le bouton est dans la liste des boutons
			    	
			    	
			    		If (InStr(ChaineSP, Trim(action))) Then 'On a trouvé le bouton de l'action
			    		
				    		'For tab = 1 To j-1 Step 1
				    		For tab = 1 To Nombre_Good_Action-1 Step 1
				    			wait 0,5
				    			fenetreProgramme.Type micTab
				    		Next
				    		
				    		
				    		If (Trim(action) = "Transferts") Then
				    			wait 1
				    			fenetreProgramme.Type micReturn
				    		End If
				    		
				    		wait 1
				    		fenetreProgramme.Type micReturn
				    		wait 1
				    		
				    		
				    		'--Nombre de validation à faire
				    		DonneValidation = DataTable("EtatValidation", dtLocalSheet)
				    		'VeriVal = InStr(DonneValidation, "|")
				    		VeriVal = split(DonneValidation,"|")
				    		If (Trim(VeriVal(1)) = "") Then
				    		
				    			nbre_Validation = 0
				    			DataValidation = split(DonneValidation,"|")
				    							    			
				    		Else 
				    		
				    			DataValidation = split(DonneValidation,"|")
								nbre_Validation = UBound(DataValidation)
				    		
				    	End If
			    		
			    		
				    		For tab = 0 To nbre_Validation Step 1 'On boule en fonction du nombre de validation
				    				
				    				Etat_Validation = DataValidation(tab)
				    				
				    				For Iterator = 0 To CpteValidation - 1 Step 1
				    					wait 1 
				    					fenetreProgramme.Type micTab
				    				Next
				    				
				    				CpteValidation = CpteValidation + 1
				    				
				    				fenetreProgramme.Type micReturn
						    		wait 1
						    		
						    		fenetreProgramme.Type  micDel
						    		fenetreProgramme.Type DataTable ("Agence", dtLocalSheet)
									fenetreProgramme.Type micTab
									wait 1
									
									
									If ( (filiale = "SGBG") or (filiale = "SGM") ) Then
									
										fenetreProgramme.Type DataTable ("AgenceSaisie", dtLocalSheet)
										fenetreProgramme.Type micTab
										wait 1
										
									End If
									
									fenetreProgramme.Type DataTable ("TypeDossier", dtLocalSheet)
									fenetreProgramme.Type micTab
									wait 1
									
									fenetreProgramme.Type DataTable ("DateExecution", dtLocalSheet)
									fenetreProgramme.Type micTab
									wait 1
									
									
									If (InStr(ChaineSP, "Portef")) Then
										fenetreProgramme.Type micTab
										wait 1
									End If
									
									
									fenetreProgramme.Type DataTable ("Devise", dtLocalSheet)
									fenetreProgramme.Type micTab
									wait 1
									
									fenetreProgramme.Type DataTable ("Utilisateur", dtLocalSheet)
									fenetreProgramme.Type micTab
									wait 1
									
									fenetreProgramme.Type micTab
									wait 3
									
									
									Retour = fenetreProgramme.GetVisibleText
									VeriLigne = InStr(Retour, "Aucun")  'On verifie si une ligne est retourné
									
										If(VeriLigne <> "0") Then 'Le tableau est vide
										
											fenetreProgramme.Type " "
											wait 1
											fenetreProgramme.Type micF3
											wait 1
											fenetreProgramme.Type micF3
											wait 1
											fenetreProgramme.Type micF3
	''										wait 1
	''										fenetreProgramme.Type micF3
											
											EndTest micFail,"KO: Aucun dossier trouvé","Echec"	
										
										Else
										
											'fenetreProgramme.Click 628, 443, micRightBtn
											Set WshShell = CreateObject("WScript.Shell")
											wait 1
											WshShell.SendKeys("+{F10}")
											wait 1
											'fenetreProgramme.InsightObject("BtnFind").Click
											For ij = 1 To 5 Step 1
												fenetreProgramme.Type micUp	
												wait 1
											Next
											fenetreProgramme.Type micReturn
											
											Dim Fenfind
											Set Fenfind = Window("Find")
											
											If Fenfind.Exist Then
												 Fenfind.Type Environment.Value("Etranger_Num_Dossier")
												 waitStep Fenfind,4
												 
												 RetourFind = fenetreProgramme.GetVisibleText
												 VeriFind = InStr(RetourFind, "Aucun")  'On verifie si une ligne est retourné
												
												 If(VeriFind <> "0") Then 'Le dossier n'a pas ete trouvé
												 
												 	EndTest micFail,"KO: Dossier introuvable","Echec"	
												 
											 	 Else
												 
												 	fenetreProgramme.Type "  "
												 	wait 1
												 	fenetreProgramme.Type Etat_Validation
												 	fenetreProgramme.Type micReturn
												 	
												 	wait 1
												 	fenetreProgramme.Type micTab
												 	
												 	
												 	'--------------------SGGH
												 	If(Environment.Value("filiale_programme") = "SGGH")Then 
												 		
												 		wait 1
													 	Dim FenDesaccords
														Set FenDesaccords = fenetreProgramme.Window("Listdisapprovals")
													 	
''													 	expDes = DataTable ("F_Desaccords", dtLocalSheet)
''													 	ChangerFenetre FenDesaccords, expDes
													 	
													 	
													 	Do While FenDesaccords.Exist(2)
															wait 1
															FenDesaccords.Activate
													 		wait 1
													 		FenDesaccords.Type " "
													 		wait 2
														Loop
													 												 	
												 	End If
												 	
												 	
												 	'-------------------------
												 	
												 	
												 	If( (Etat_Validation = "Ignoré") or (Etat_Validation = "Ignored") )Then 
												 	
												 	
													 		Dim fenetreSaisie, expSaisie
															Set fenetreSaisie = fenetreProgramme.Window("SaisieMotif")
															
															'Récupération de l'expression régulière
															expSaisie = DataTable("SaisieMotif", dtLocalSheet) 
															
															ChangerFenetre fenetreSaisie, expSaisie
															
															If (fenetreSaisie.Exist(3)) Then
															
																fenetreSaisie.Type DataTable("MotifRejet", dtLocalSheet) 
															    wait 0,5
																fenetreSaisie.Type micTab
															
															End If
												 	
												 	End If
												 	
												 	
												 	
												 	wait 1
												 	fenetreProgramme.Type micEsc
												 	
												 	
												 	
												 	
												 	
												 	wait 1
												 	Dim FenConfirmation
													Set FenConfirmation = fenetreProgramme.Window("Confirmation")
												 	
												 	If(FenConfirmation.Exist)Then
												 		FenConfirmation.Activate
												 		wait 1
												 		FenConfirmation.Type " "
												 	End If
												 	
												 	
												 	wait 1
												 	fenetreProgramme.Type micF3
												 	wait 1
												 	
												 	
												 	If(nbre_Validation + 1 = CpteValidation) Then
												 		
												 		wait 2
												 		
												 		Do 
													 		fenetreProgramme.Type micF3
													 		wait 1
													 		
												 		Loop While (fenetreProgramme.Exist(2))
												 		
												 		
'''''												 		wait 2
'''''												 		fenetreProgramme.Type micF3
'''''												 		wait 1
'''''												 		fenetreProgramme.Type micF3
'''''												 		wait 1
												 		
												 	End If
												 	
												 	
											 
											 	End If
											 
											End If
									
									  End If
				    		
				    		
				    		
				    			Next
			    		
			    		
			    		Exit For  'Fin choix action
			    		
			    		
			    	End If
			    	
			    		
			     End If 'Fin verif que le bouton est dans la liste des boutons
			    	
			    	
				
				Next
				
			End If
		
		
		End If

End Function
'------------------------Fin Programme oivalid




'------------------------Programme cbconshis
Public Function OpenCbconshis()
		verifierNomHote
		

	   	Tuer_programme_ouvert
	   	
	   	
		Set sheet_use = DataTable.AddSheet("Sheet_cbconshis") 'On cree un sheet temporaire
		wait 3
		accesAuProgrammecbconseve "cbconshis", sheet_use.Name
		
		Dim fenetreProgramme, expReg
		Set fenetreProgramme = Window("cbconshis_Fn")
		
		'Récupération de l'expression régulière
		expReg = Environment.Value("chemin_programme") 
		
		'Changer de fenêtre en mettant la bonne expression régulière dans la propriété text de l'objet
		expReg = fnCorrigerCharSpec(expReg)
		ChangerFenetre fenetreProgramme, expReg
		
		If (fenetreProgramme.Exist) Then
		    
		    version_cb = Environment.Value("version_programme")
		    
		    Dim temp, temp_affiche, find_evenement
			temp = 1
			temp_affiche = 2
			find_evenement = 0
	
		    '-Log
			Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
		    
		    'Verification d'existance de la fenetre du formulaire
			fenetreProgramme.Activate
		    
		    fenetreProgramme.Maximize
		    
			Dim nbLignes
		    nbLignes = DataTable.GetSheet("Local").GetRowCount
				
							
			filiale_check = DataTable.Value("filiale", "Local")
			filiale_check = Trim(filiale_check)
				
			filiale = Environment.Value("filiale_programme")
		
		
		    'corps ou Main 
			If filiale_check = filiale then
			
				'Saisie de l'agence du compte client
				fenetreProgramme.Type DataTable("Agence",dtLocalSheet)
				fenetreProgramme.Type micTab
				wait temp
				
				'Saisie de la dévise
				fenetreProgramme.Type DataTable("Devise",dtLocalSheet)
				fenetreProgramme.Type micTab
				wait temp
				
				'Saisie du numero de compte du client
				fenetreProgramme.Type DataTable("Compte",dtLocalSheet)
				fenetreProgramme.Type micTab
				wait temp
				
				If (filiale_check <> "SGBG") Then
					fenetreProgramme.Type DataTable("Cle",dtLocalSheet)
				End If
				
				fenetreProgramme.Type micTab
				wait temp
				
				'***Saisie de la période de recherche de données
				'Saisie de la date A
				fenetreProgramme.Type DataTable("PeriodeDu",dtLocalSheet)
				fenetreProgramme.Type micTab
				wait temp
				
				'Saisie de la date B
				fenetreProgramme.Type DataTable("PeriodeAu",dtLocalSheet)
				fenetreProgramme.Type micTab
				wait temp
				
				evenement = DataTable("evenement",dtLocalSheet)
				
				'Saisie des critères suplémentaires de consultation		
				'Pour utiliser la fenetre enfant qui s'affiche	
				
				filsExist = 0				
				
    			Set fenetreProgrammeCritereSup = fenetreProgramme.Window("SaisieCritere")
    			
    			expRegCritereSup = DataTable("FenetreInputOfAdditonal",dtLocalSheet)
					
				ChangerFenetre fenetreProgrammeCritereSup, expRegCritereSup
				
				If(fenetreProgrammeCritereSup.Exist(2))Then 
					filsExist = 1
				Else
				
					Set fenetreProgrammeCritereSup = Window("SaisieCritere_2")
					
					ChangerFenetre fenetreProgrammeCritereSup, expRegCritereSup
					
					If(fenetreProgrammeCritereSup.Exist(2))Then  
						filsExist = 1
					End If
				
				End If
				
				'************ script alternatif pour gérer les deux cas ************
				
				'If (fenetreProgrammeCritereSup.Exist) Then
				If (filsExist = 1) Then
				
					fenetreProgrammeCritereSup.Activate
					wait temp
					
					If (version_cb = "V10") then
					
						'Saisie du code d'operation
						fenetreProgramme.Type DataTable("operation",dtLocalSheet)
						wait temp
						fenetreProgramme.Type micTab
						wait temp
						'Saisie de l'évènement
						fenetreProgramme.Type evenement
						wait temp
						fenetreProgramme.Type micTab
						wait temp
						fenetreProgramme.Type micESC
						wait temp
					
					
					ElseIf (version_cb = "V11") Then
					
						'Saisie du code d'operation
						fenetreProgrammeCritereSup.Type DataTable("operation",dtLocalSheet)
						wait temp
						fenetreProgrammeCritereSup.Type micTab
						wait temp
						fenetreProgrammeCritereSup.Type micESC
						wait temp
						
						'Saisie de l'évènement
						fenetreProgrammeCritereSup.Type evenement
						wait temp
						fenetreProgrammeCritereSup.Type micTab
						wait temp
						fenetreProgrammeCritereSup.Type micESC
						wait temp
					
					End If
					
				End If
				
				
				TypeEcriture = DataTable("TypeEcriture",dtLocalSheet)
				
				'0 - Onglet Mouvement
				'1 - Onglet Evenement
				'2 - Onglet Evenements en attente
				
				wait temp_affiche
				
				Onglet fenetreProgramme, TypeEcriture 	

							wait temp
							fenetreProgramme.Type micShiftDwn +  micF10  + micShiftUp 
							
							wait 0,5
					VerifLigne = fenetreProgramme.GetVisibleText
							
						
							wait temp
							fenetreProgramme.Type micHome
						
	                            If( InStr(VerifLigne, "Bas") <> 0 or InStr(VerifLigne, "Last") <> 0 or InStr(VerifLigne, "Next") <> 0)  Then 'Il ya au moins une ligne dans le tableau
							
								Do 
									
									wait temp
									fenetreProgramme.Type micShiftDwn +  micF10  + micShiftUp 
									wait temp
									
									wait 0,5
									VerifLigne = fenetreProgramme.GetVisibleText
								
									fenetreProgramme.Type micUp
									wait temp
									fenetreProgramme.Type micReturn
									
									wait temp
									fenetreProgramme.Type micPgUp
																					
									wait 0,5
									Set objCopy= CreateObject("Mercury.Clipboard")
									wait 0,5
									ligne = objCopy.GetText
									objCopy = null
									
									Tableau = split(ligne,VbCr)
									Nomb = Ubound(Tableau)
									
									For Iterator = 0 To Nomb-1 Step 1
										
										wait 0,5
										Data_line = Tableau(Iterator)
										
										Tableau_Ligne = Split(Data_line,chr(9))
										
										col = 1
										If (TypeEcriture = "0") Then 
											col = 2
										End If
										
										wait 1
										
										If (Tableau_Ligne(col) = evenement) Then
										     fenetreProgramme.Click 442,101  'Ajouter
										     wait 1
										     fenetreProgramme.Type micHome
											wait 1
											For Iterat_Dwn = 1 To Iterator Step 1
												wait 0,5
												fenetreProgramme.Type micDwn
											Next
											
											wait 0,5
											If (TypeEcriture = "0") Then 
												wait 1
																							
												
												If filiale = "SGGH" Then
												
													If (fenetreProgramme.InsightObject("BtnConsuSGGH").Exist(5)) Then
														wait 1
														fenetreProgramme.InsightObject("BtnConsuSGGH").Click
														
													End If
														
												Else
													wait 1
													If(filiale = "SGC")Then
												'		If(fenetreProgramme.InsightObject("BtnConsultationSGC").Exist(2)) THen
															'fenetreProgramme.InsightObject("BtnConsultationSGC").Click		
															fenetreProgramme.Type  micReturn 															
													'	End If
														
													Else
													
													
														If(filiale = "SGBF")Then
														
															'fenetreProgramme.InsightObject("BtnConsultationSGC").Click		
															fenetreProgramme.Type  micReturn 		
														Else
															If(fenetreProgramme.InsightObject("BtnConsultation").Exist(2)) THen
															fenetreProgramme.InsightObject("BtnConsultation").Click								
															Else	
															    	 fenetreProgramme.InsightObject("BtnConsul2").Click 
															End If
														End If
													
													
														
													End If
												
												End If
												
												
												
												wait 2

'												Set fenetreConsultation = fenetreProgramme.Window("ConsultationPiece")
												Set fenetreConsultation = Window("ConsultationPiece")
		
												expConsultation = DataTable("FenetreConsultation",dtLocalSheet) 
												
												If (fenetreConsultation.Exist(2)) Then
													fenetreConsultation.Activate
													wait 1
													fenetreConsultation.Maximize
													wait 2
													fenetreConsultation.Type micF3
												End If
												
											End If
											

											find_evenement = 1									
											wait 0,5
											Reporter.ReportEvent micPass, "Test OK", "OK"
											
											Exit Do
											
											
										End If
																
									Next
									  
									fenetreProgramme.Type micPgDwn
									wait temp
									fenetreProgramme.Type micPgDwn
									
							
								Loop While ( (InStr(VerifLigne, "Bas") <> 0) or (InStr(VerifLigne, "Last") <> 0)  )
								
								
								If find_evenement = "0" Then
								
'									MSGBOX "L'evenement n'a pas ete trouvé"
									EndTest micFail, "Test KO ", "L'evenement n'a pas ete trouvé" 
								
								End If
								
							Else 'Else dans le tableau
							
							
								'MSGBOX "Aucune ligne dans le tableau"
								EndTest micFail, "Test KO ", "Aucune ligne dans le tableau" 
							
							End If  'Fin ligne dans le tableau
		
					
					Do			
						fenetreProgramme.Type micF3
						wait 1
					Loop While (fenetreProgramme.Exist(2))
					
					
				
			End If
			
			
		End If
		
		
		
End Function


Public Function Onglet(fenetreProgramme, TypeEcriture)

	For Iterator = 1 To TypeEcriture Step 1
					
		fenetreProgramme.Type micCtrlDwn + micTab + micCtrlUp
						
	Next
	
End Function

'------------------------Fin Programme cbconshis



'------------------------Programme cbCbforabd
Public Function OpenCbforabd()

		Set sheet_use = DataTable.AddSheet("Sheet_Cbforabd") 'On cree un sheet temporaire
		wait 3
		accesAuProgrammecbconseve "cbforabd", sheet_use.Name


		Dim fenetreProgramme, expReg
		Set fenetreProgramme = Window("cbforabd_Fn")

		
		'Récupération de l'expression régulière
		expReg = Environment.Value("chemin_programme") 
		
		'Changer de fenêtre en mettant la bonne expression régulière dans la propriété text de l'objet
		expReg = fnCorrigerCharSpec(expReg)
		ChangerFenetre fenetreProgramme, expReg

        If (fenetreProgramme.Exist) Then

			'-Log
			Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
		    
		    'Verification d'existance de la fenetre du formulaire
			fenetreProgramme.Activate
		    
		    fenetreProgramme.Maximize
		    
			Dim nbLignes
		    nbLignes = DataTable.GetSheet("Local").GetRowCount
				
							
				filiale_check = DataTable.Value("filiale", "Local")
				filiale_check = Trim(filiale_check)
					
				filiale = Environment.Value("filiale_programme")
		
		
		       'corps ou Main 
				If filiale_check = filiale then
				
						fenetreProgramme.Activate
						''-Log
						Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
						
						fenetreProgramme.Maximize
						wait 0,5
						
						If DataTable("Action",dtLocalSheet)= "Rappel" Then
							fenetreProgramme.Type "R"
						Else 
							fenetreProgramme.Type "M"
						End If
						
						fenetreProgramme.Type DataTable ("Agence", dtLocalSheet)
						wait 1
						fenetreProgramme.Type micTab
						wait 1
						fenetreProgramme.Type micF4
						wait 2
						
						Dim fenetreRecherche, expSearch
						Set fenetreRecherche = fenetreProgramme.Window("RechercheNature")
						
						expSearch = Trim(DataTable("fenetreRecherche",dtLocalSheet)) 
					  
						ChangerFenetre fenetreRecherche, expSearch
						
						If(fenetreRecherche.Exist)Then 
							
							fenetreRecherche.Maximize
							
							If DataTable ("typeEvenement",dtLocalSheet) = "N" Then
								wait 0,5
								fenetreProgramme.Type Environment.Value("eve")
							Else 
								wait 0,5
								fenetreRecherche.Type DataTable ("Evenement", dtLocalSheet)
							End If
							
							fenetreRecherche.Type micTab
							wait 0,5
							fenetreRecherche.Type DataTable ("NatureTransaction", dtLocalSheet)
							fenetreRecherche.Type micTab
							wait 0,5
							fenetreRecherche.Type DataTable ("OperationSaisie", dtLocalSheet)
							fenetreRecherche.Type micTab
							wait 0,5
							fenetreRecherche.Type DataTable ("CaisseDeSaisie", dtLocalSheet)
							fenetreRecherche.Type micTab
							wait 0,5
							fenetreRecherche.Type DataTable ("UtilisateurDeSaisie", dtLocalSheet)
							fenetreRecherche.Type micTab
							wait 0,5
							fenetreRecherche.Type DataTable ("Gestionnaire", dtLocalSheet)
							fenetreRecherche.Type micTab
							wait 0,5
							fenetreRecherche.Type DataTable ("ClientDeSaisie", dtLocalSheet)
							fenetreRecherche.Type micTab
							wait 2
							
							'------On verifie pour voir s'il ya une ligne affiché
									fenetreRecherche.Click 394, 450, micRightBtn
									Wait 0,5
									Retour = fenetreRecherche.GetVisibleText
									wait 0,5
									VerifRetour = InStr(Retour, "Find")
									wait 0,5
									fenetreRecherche.Click 371,460
									
									IF(VerifRetour <> "0") Then 
										fenetreRecherche.Type micReturn
									Else
										fenetreRecherche.Type micF3
									End If
								'----------------Fin verification retour
								
								
								wait 1
								fenetreProgramme.Type micTab
								wait 3
								
								
								If(VerifRetour <> "0") Then 'On a des lignes dans la grille
								
									wait 0,5
									fenetreProgramme.Type micRight 
									wait 0,5
									fenetreProgramme.Type micRight 
																		
									If fenetreProgramme.InsightObject("ColDate").Exist(3) Then
										fenetreProgramme.InsightObject("ColDate").Click
									Else
										If(InsightObject("ColDate_2").Exist(3)) Then
											InsightObject("ColDate_2").Click
										Else 
											fenetreProgramme.InsightObject("ColDate_3").Click
										End If
									End If
									
									'--------------Recup premiere date du tableau
									wait 1
									fenetreProgramme.Type micHome 
									wait 1
									fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
									
									wait 1
									Set objCopy= CreateObject("Mercury.Clipboard")
									ligne = objCopy.GetText
									
									Tableau_Ligne = Split(ligne,chr(9))
									
									Date1 = Tableau_Ligne(9)
									objCopy = null
									'--------------Fin Recup premiere date du tableau
									
									wait 1
									fenetreProgramme.Type micDwn
									
									'--------------Recup 2eme date du tableau
									wait 1
									fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
									
									wait 1
									Set objCopy= CreateObject("Mercury.Clipboard")
									ligne = objCopy.GetText
									
									Tableau_Ligne = Split(ligne,chr(9))
									
									Date2 = Tableau_Ligne(9)
									objCopy = null
									'--------------Fin Recup premiere date du tableau
								
									wait 0,5
									
									If(Date1 < Date2) Then 
										fenetreProgramme.Type micEnd
									Else 
										fenetreProgramme.Type micHome
									End If
									
									'-----------------------Good Date--------------------------
									wait 1
									fenetreProgramme.Type micCtrlDwn + "c" + micCtrlUp
									
									wait 1
									Set objCopy= CreateObject("Mercury.Clipboard")
									ligne = objCopy.GetText
									
									Tableau_Ligne = Split(ligne,chr(9))
									
									DateVerif = Tableau_Ligne(9)
									objCopy = null
									
								    NowDate = DateAdd("n", DataTable.Value("DecalageHoraire", "Local"), Now())
								    
									Difference_Date =  CLng(DateDiff("s",DateVerif,NowDate))
									DifferenceSeconde = CLng(DataTable.Value("DifferenceSeconde", "Local"))
									
									If ( Difference_Date <= DifferenceSeconde ) Then
									
										wait 2
										fenetreProgramme.Type micReturn
										wait 5	
										
										Dim fenetreEvenement, expEvenementforce
										Set fenetreEvenement = Window("Evenement_Fn")	
										expEvenementforce = DataTable("fenetreEvenement",dtLocalSheet)
		
										ChangerFenetre fenetreEvenement, expEvenementforce 
										
										If fenetreEvenement.Exist(3) Then
											
											fenetreEvenement.Activate										
											wait 1
											fenetreEvenement.Type micReturn
											
											
											Dim fenetreForcage, expForcage
											Set fenetreForcage = fenetreEvenement.Window("Forçage")
											expForcage = DataTable("expForcage",dtLocalSheet)
											
											ChangerFenetre fenetreForcage, expForcage
											
											If fenetreForcage.Exist(3) Then
												fenetreForcage.Activate
												
												
												wait 1
												fenetreForcage.Type DataTable("ForçageUser",dtLocalSheet)
'												fenetreForcage.Type micTab
												wait 0,5
												fenetreForcage.Type micTab
												
												If filiale="SGBG" Then
													If DataTable("choixConfirmation",dtLocalSheet) = "V" Then
															Window("Confirmation").Type " "
													Else 
															Window("Confirmation").Type micTab
															wait 1
															Window("Confirmation").Type " "
													End If
												
													For Iterator = 1 To 2 Step 1
														wait 2
														fenetreProgramme.Type micF3
													Next
													
												Else 
													
													Dim fenetreDesacord, expDesacord
													Set fenetreDesacord = fenetreEvenement.Window("ListeDesDesaccords")
													expDesacord = DataTable("expDesacord",dtLocalSheet)
														
													ChangerFenetre fenetreDesacord, expDesacord
													If fenetreDesacord.Exist(2) Then
														fenetreDesacord.Activate
														fenetreDesacord.Type " "
														wait 3
														If DataTable("choixConfirmation",dtLocalSheet) = "V" Then
																Window("Confirmation").Type " "
														Else 
																Window("Confirmation").Type micTab
																wait 1
																Window("Confirmation").Type " "
														End If
													
													End If
												
												 End If
				
												
											
												
											End If
											
											
											
										End If
										
										
									Else 'Ce n'est pas le bon evenement
									
										MSGBOX "Le delai de prise en compte du fichier est passé"
										
										For Iterator = 1 To 2 Step 1
											fenetreProgramme.Type micF3
										Next 	
										
									End If
									
									'-----------------------Fin Good Date--------------------------
									
									
								
								Else 
					
									For Iterator = 1 To 2 Step 1
										fenetreProgramme.Type micF3
									Next 
									
								End If
								
								
							
						End If
				
				End If

		Else
				Reporter.ReportEvent micFail, " : Fenêtre introuvable", "echec"
		End If
		
		
End Function


Public Function OpenCbfordesa()

		Set sheet_use = DataTable.AddSheet("Sheet_Cbfordesa") 'On cree un sheet temporaire
		wait 3
		accesAuProgrammecbconseve "cbfordesa", sheet_use.Name



		Dim fenetreProgramme, expReg
		Set fenetreProgramme = Window("cbfordesa_Fn")

		
		'Récupération de l'expression régulière
		expReg = Environment.Value("chemin_programme") 
		
		'Changer de fenêtre en mettant la bonne expression régulière dans la propriété text de l'objet
		expReg = fnCorrigerCharSpec(expReg)
		ChangerFenetre fenetreProgramme, expReg

        If (fenetreProgramme.Exist) Then

			'-Log
			Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
		    
		    'Verification d'existance de la fenetre du formulaire
			fenetreProgramme.Activate
		    
		    fenetreProgramme.Maximize
		    
			Dim nbLignes
		    nbLignes = DataTable.GetSheet("Local").GetRowCount
				
							
				filiale_check = DataTable.Value("filiale", "Local")
				filiale_check = Trim(filiale_check)
					
				filiale = Environment.Value("filiale_programme")
		
		
		       'corps ou Main 
				If filiale_check = filiale then
				
						fenetreProgramme.Activate
						''-Log
						Reporter.ReportEvent micPass, "*** Debut Du cas de Tests",  "success"
						
						fenetreProgramme.Maximize
						wait 0,5
						
						If DataTable("Action",dtLocalSheet)= "Unitaire" Then
							fenetreProgramme.Type "U"
						Else 
							fenetreProgramme.Type "B"
						End If
						
						
						wait 1
						fenetreProgramme.Type DataTable ("Agence", dtLocalSheet)						
						fenetreProgramme.Type micTab
						
						wait 1
						fenetreProgramme.Type DataTable ("Code_Departement", dtLocalSheet)						
						fenetreProgramme.Type micTab
						
						wait 1
						fenetreProgramme.Type DataTable ("Code_User", dtLocalSheet)						
						fenetreProgramme.Type micTab
						
						wait 1
						fenetreProgramme.Type DataTable ("Code_Client", dtLocalSheet)						
						fenetreProgramme.Type micTab
						
						wait 1
						fenetreProgramme.Type DataTable ("Code_Desaccord", dtLocalSheet)						
						fenetreProgramme.Type micTab
						
						'Afficharge de le fenetre de recherche
						wait 2
						fenetreProgramme.Click 551, 155, micRightBtn
						fenetreProgramme.Type micUp
						wait 0,5
						fenetreProgramme.Type micReturn
						
						
						
						If Window("Find").Exist(2) Then
							Window("Find").Activate
							wait 1
							numeroEve = DataTable("NumeroEvenement",dtLocalSheet)
							If numeroEve <> "" Then
								Window("Find").Type numeroEve
							Else 
								Window("Find").Type Environment.Value("eve")
							End If
														
							For n = 1 To 4 Step 1
								Window("Find").Type micTab
							Next
						End If
						
						
						'Afficharge de la fenetre de forçage
						wait 1					
						fenetreProgramme.Type micReturn
						
						Dim fenetreForcage, expForcage
						Set fenetreForcage = fenetreProgramme.Window("fenetreForçage")
						expForcage = DataTable("expForcage",dtLocalSheet)
						
						ChangerFenetre fenetreForcage, expForcage
						
						If fenetreForcage.Exist(2) Then
							fenetreForcage.Activate
							wait 1
							fenetreForcage.Type DataTable("Choix_Forcage",dtLocalSheet)
							fenetreForcage.Type micTab
							
							
							'Afficharge de la fenetre des desaccords
							Dim fenetreDesaccords, expDesaccords
							Set fenetreDesaccords = fenetreForcage.Window("fenetreDesaccord")
'							expDesaccords = DataTable("expForcage",dtLocalSheet)
'							
'							ChangerFenetre fenetreDesaccords, expDesaccords
							
							If fenetreDesaccords.Exist(2) Then
								fenetreDesaccords.Activate
								wait 1
								fenetreDesaccords.Type "B"
								
								wait 2
								fenetreDesaccords.Window("Confirmation").Activate
								wait 1
								fenetreDesaccords.Window("Confirmation").Type "V"								
							End If
							'fin afficharge fenetre desaccords							
							
						End If
						'fin afficharge fenetre forçage
					
					'Ferméture de la fenetre principale
					Set fenetreProgramme = Window("cbfordesa_Fn")
					wait 1
					fenetreProgramme.Activate
					wait 4
					fenetreProgramme.Type micF3
					wait 1
					fenetreProgramme.Type micF3
					wait 1
					fenetreProgramme.Type micF3
					
				End If

		Else
				Reporter.ReportEvent micFail, " : Fenêtre introuvable", "echec"
		End If
		
		
End Function


'fonction conversion des dates

Function myDateFormat(myDate)
    d = TwoDigits(Day(myDate))
    m = TwoDigits(Month(myDate))    
    y = Year(myDate)
    myDateFormat= y & "-" & m & "-" & d & " " &timeStamp(myDate)
End Function

Function TwoDigits(num)
    If(Len(num)=1) Then
        TwoDigits="0"&num
    Else
        TwoDigits=num
    End If
End Function
Function timeStamp(myDate)
    Dim t 
    t = myDate
    timeStamp = Hour(t) & ":" & _
    Right("0" & Minute(t),2)
   
End Function


'Fonction Valorisation automatique des scripts
'Role : Permet de valoriser automatiquement les scripts a partir de jeux de données excel fourni par les GD
'Crée le 17/05/2022
'Par @Ristide DEGBEU
'Modifié le 08/09/2022
'Par @Ousmane SANGARE
'Description modification : Prise en compte des code utilisateur selon la filiale et le programme pour l'utilisateur qui exécute le cas
Function Valorisation_automatique()
Reporter.ReportEvent micPass, "*** Debut de la valorisation du cas de test",  "success"
'Declaration des variables
Dim nbColonneAUT, nbColonneGD, tot, Colonne_GD(), Colonne_AUT()
Dim path, sheet, nom_complet_file, nom_complet, nom_complet_file_nbr, folder, nb_debut_trait, nb_debut_traitF, Lignes_donnes




'Recuperation des parametres du fichier a utiliser
Reporter.ReportEvent micPass, ">> Recuperation de la localisation et du nom du fichier de donnees ",  "success"
'path = DataTable ("NomFichier", dtGlobalSheet)
'folder = DataTable ("repertoire", dtGlobalSheet)
'path = "[ALM\Resources] Resources\FichierParametre\Aborescence_"&filiale 

'Fichier_Data_A_Lire


'Recuperation de la dernière ligne du fichier utilisé
'nom_complet_file_nbr =  folder & path & ".txt"
'nom_complet =  folder & path & ".xlsx"
nom_complet_BIG =  Fichier_Data_A_Lire
nom_complet =  nom_complet_BIG & ".xlsx"
nom_complet_file_nbr =   nom_complet_BIG & ".txt"

Set ressource_global_file = CreateObject("Scripting.FileSystemObject")

Reporter.ReportEvent micPass, ">> Recuperation de la dernière ligne du  fichier de donnees qui a ete executee",  "success"
' Si le fichier de données existe
Reporter.ReportEvent micPass, ">> Test de la presence du fichier de donnees dans le repertoire",  "success"
If ressource_global_file.FileExists(nom_complet ) Then
    '"Le fichier existe." 
    Reporter.ReportEvent micPass, ">> -- Existence du fichier de donnees",  "success"
    'Création du Sheet temporaire
    Set sheet_use = DataTable.AddSheet("Sheet_DONNEES") 
  
    'Recuperation du fichier a mettre dans un Sheet Temporaire
     sheet = sheet_use.Name 

     'DataTable.ImportSheet nom_complet, "Feuil1", sheet     | Ancienne version, prise en compte de la version française
      DataTable.ImportSheet nom_complet, 1, sheet                 '| Nouvelle version, prise en compte de toutes les versions

     'Si le ichier de données est vide [ Contient qu'une seule ligne]
      Reporter.ReportEvent micPass, ">> Test si le fichier de donnees contient des lignes de donnees et des entetes",  "success"
      Lignes_donnes=DataTable.GetSheet("Sheet_DONNEES").GetRowCount
    
If  Lignes_donnes >= 1 Then
     ' Fichier contient plus de Une ligne
     Reporter.ReportEvent micPass, ">> -- Existence des donnes et des entetes dans le fichier de donnees",  "success"
	 
	'Creation si non existant du fichier qui compte les donnes traitées
	If ressource_global_file.FileExists(nom_complet_file_nbr ) Then
	    '"Le fichier existe." 
	Else
	    '"Le fichier n'existe pas."
	    Set ressource_file_nbr_ecr = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 2, true)
	      ressource_file_nbr_ecr.Write(1)
	      ressource_file_nbr_ecr.Close	    
	End If

	 Set ressource_file_nbr_lec = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 1)
	 nb_debut_trait = ressource_file_nbr_lec.ReadAll
	 nb_debut_trait = trim (nb_debut_trait) 
	 
	 Reporter.ReportEvent micPass, ">> Test si toutes les lignes du fichier ne sont pas encore executees",  "success"
	 
	 Lignes_donnes = CInt(Lignes_donnes) 
	 nb_debut_trait = CInt(nb_debut_trait)
 
 If   Lignes_donnes >= nb_debut_trait then
  Reporter.ReportEvent micPass, ">> -- Existence des lignes de donnees non encore executees",  "success"
   
'Recuperation des colonnes de chaque Sheet
Reporter.ReportEvent micPass, ">> Recuperation des colonnes de chaque Sheet",  "success"
nbColonneGD=DataTable.GetSheet("Sheet_DONNEES").GetParameterCount
nbColonneAUT = DataTable.GetSheet("Local").GetParameterCount


	'Vérification du nombre de colonnes dans le fichier de données GD
	If nbColonneGD > 50 Then
		 Reporter.ReportEvent micFail, ">> -- Le nombre de colonne dans le fichier de données est > 50",  "Echec"	 
		 Fichier_KO_JDD("Nombre de colonne de jeu de données suppérieur à 50. Requête à affiner")	
		 EndTest micFail, "Nombre de colonne de jeu de données suppérieur à 50. Requête à affiner", "echec" 
'		 ExitTest
	End If


	ReDim Preserve Colonne_GD(50)
	ReDim Preserve Colonne_AUT(500)

	For i=1 to nbColonneGD
	Colonne_GD(i) = DataTable.GetSheet("Sheet_DONNEES").GetParameter(i).Name
	Next
	
	For i=1 to nbColonneAUT
	Colonne_AUT(i) = DataTable.GetSheet("Local").GetParameter(i).Name
	Next


'Choix de la ligne a mettre a jour de la filiale
 rsoto = Split(nom_complet_BIG,"\")
 total_r = Ubound(rsoto)
 filiale_r = rsoto(total_r - 1)
 filiale_r = trim(filiale_r)
 
 'Récupération des information de l'utilisateur 
userInfoConfig = User_Info_Config(filiale_r)

 'MsgBox nom_complet_BIG
 'MsgBox filiale_r
    nbLignesR = DataTable.GetSheet("Local").GetRowCount	
    'MsgBox nbLignesR
    traiter_keh = 0
    
	filiale_existe = 0
	nbLignesP =  DataTable.GetSheet("Local").GetRowCount
	'Vérifie si le sheet locale contient au moins une ligne exploitable
	If nbLignesP = 0 Then
		Reporter.ReportEvent micFail, ">>> Le fichier de donnée ACTION_PRINCIPALE ne contient aucune ligne exploitable; script à mettre à jour dans le nouveau format", "Echec"
		EndTest micFail, ">>> Script à mettre à jour dans le nouveau format", "Echec"
	Else 
		'Continuer l'exécution
	End If
	
	For iP = 1 to nbLignesP
		filiale_check_1 = DataTable.Value("filiale", "Local")
		filiale_check_1 = Trim(filiale_check_1)
		if filiale_check_1 = filiale_r then
			filiale_existe = 1
			Exit For
		End if
		DataTable.GetSheet("Local").SetNextRow
	Next
	
	'Récupération du programme à exécuté
	programme_Execute = trim(DataTable("programme",GlobalSheet))
	
	'Ajout d'une la ligne pour le paramétrage des données de la filiale concernée
	if filiale_existe <> 1 then
		newLigne = nbLignesP+1		
			'Copie des valeurs de la ligne  
			For nbCol = 1 To nbColonneAUT
					parametreDonne = Colonne_AUT(nbCol)								
					
					wait 1
					If parametreDonne = "filiale" Then
						DataTable.GetSheet("Local").SetCurrentRow(newLigne)
						DataTable ("filiale", dtLocalSheet) = filiale_r
						
					ElseIf (parametreDonne = "UserCbconseve" or parametreDonne = "Utilisateur") Then
'						programme_Execute = DataTable("programme",GlobalSheet)
						
						If parametreDonne = "UserCbconseve" Then
							
							'Verification du programme de consultation d'évènement
							Reporter.ReportEvent micDone, ">> -- Test de verification du programme à exécuter",  "Test"	
							If programme_Execute = "cbconseve" Then
								DataTable.GetSheet("Local").SetCurrentRow(newLigne)
								DataTable (parametreDonne, dtLocalSheet) = "" 'userInfoConfig(2)
								Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"	
								
							Else 
								DataTable.GetSheet("Local").SetCurrentRow(newLigne)
								DataTable (parametreDonne, dtLocalSheet) = userInfoConfig(2)	
								Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"
								
							End If
							
						Else 
							
							'Mise à jour de paramètre UserCbconseve et Utilisateur selon le programme utilisé
							'Si programme oivalid alors aucune valeur à mettre (cas de validation pour un évènement déja crée)
							'Sinon il sagit d'un cas de création alors mettre à jour le paramètre avec le code utilisateur de l'utilisateur connecté					
							
							If programme_Execute = "oivalid" Then 'Pour un cas d evalidation
								DataTable.GetSheet("Local").SetCurrentRow(newLigne)
								DataTable (parametreDonne, dtLocalSheet) = "" 'userInfoConfig(2)
								
							Else 'Pour un cas de création
								DataTable.GetSheet("Local").SetCurrentRow(newLigne)
								DataTable (parametreDonne, dtLocalSheet) = userInfoConfig(2)
								
							End If
							Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"
						End If
							
					Else
					
						For nbLign = 1 To nbLignesP
							DataTable.GetSheet("Local").SetCurrentRow(nbLign)							
							valeur_A_Copier = DataTable (parametreDonne, dtLocalSheet) '= valeur_A_Copier DataTable.GetSheet("Local").GetParameter(parametreDonne).ValueByRow(nbLign)
							If valeur_A_Copier <> "" Then
								
								Exit For 
							End If
						Next
						 debut_valeur_A_Copier= Mid(valeur_A_Copier,1,1)
					        If debut_valeur_A_Copier = "0" Then
					           	valeur_A_Copier = "'" & valeur_A_Copier           	
					        End If
						DataTable.GetSheet("Local").SetCurrentRow(newLigne)
						DataTable (parametreDonne, dtLocalSheet) = valeur_A_Copier
	'					DataTable.GetSheet("Local").GetParameter(parametreDonne) = valeur_A_Copier
	
					End If
			Next
		
		DataTable.GetSheet("Local").SetCurrentRow(newLigne)

		Reporter.ReportEvent micPass, ">> La filiale a traiter à été ajouté dans le Sheet à la ligne " &newLigne,  "success"
	End if
	
	For iR = 1 to nbLignesR	
		filiale_check = DataTable.Value("filiale", "Local")
		filiale_check = Trim(filiale_check)		
             'MsgBox filiale_check		
		 If filiale_check = filiale_r then
		   Reporter.ReportEvent micPass, ">> Ligne de donnees retrouvee dans le Sheet à la ligne " &iR,  "success"
		     traiter_keh = 1

		'Mise à jour du code utilisateur 
		For i=1 to nbColonneAUT
		
				'Paramètre encours de traitement	
					param_1 = 	Colonne_AUT(i) 			
		   		If (Colonne_AUT(i) = "UserCbconseve") or (Colonne_AUT(i) = "Utilisateur") Then
		   		 
		   		 	If Colonne_AUT(i) = "UserCbconseve" Then
							
							'Verification du programme de consultation d'évènement
							Reporter.ReportEvent micDone, ">> -- Test de verification du programme à exécuter",  "Test"	
							If programme_Execute = "cbconseve" Then
								DataTable (Colonne_AUT(i), dtLocalSheet) = "" 'userInfoConfig(2)
								Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"	
								
							Else 
								DataTable (Colonne_AUT(i), dtLocalSheet) = userInfoConfig(2)								
								Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"
								
							End If
							
						Else 
							
							'Mise à jour de paramètre UserCbconseve et Utilisateur selon le programme utilisé
							'Si programme oivalid alors aucune valeur à mettre (cas de validation pour un évènement déja crée)
							'Sinon il sagit d'un cas de création alors mettre à jour le paramètre avec le code utilisateur de l'utilisateur connecté					
							
							If programme_Execute = "oivalid" Then 'Pour un cas d evalidation
								DataTable (Colonne_AUT(i), dtLocalSheet) = "" 'userInfoConfig(2)
								
							Else 'Pour un cas de création
								DataTable (Colonne_AUT(i), dtLocalSheet) = userInfoConfig(2)
								
							End If
							Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"
						End If
		   		 	
		   		 	
		    		End If
		Next
		

'Mise à jour des colonnes
Reporter.ReportEvent micPass, ">> Mise à jour des colonnes dans le cas de test",  "success"
DataTable.GetSheet("Sheet_DONNEES").SetCurrentRow(nb_debut_trait)
For i=1 to nbColonneGD
   valeur_existe = 0

	'Paramètre encours de traitement	
'	param_2 = 	UCase(Colonne_GD(i))
'	If param_2 = "ETRANGER_NUM_DOSSIER" Then
'		wait 1
'	End If
       For j=1 to nbColonneAUT
        
           
            If UCase(trim(Colonne_GD(i)))  = UCase(trim(Colonne_AUT(j))) Then
            	Colonne_AUTO_Val = Colonne_AUT(j)
         		valeur_existe = 1	
			Exit for	
     	    End If
'    MsgBox valeur_existe & " " & Colonne_GD(i) & " " & Colonne_AUT(j)
    
        Next
        If  valeur_existe = 1 Then
           entete_donne = UCase(Trim(Colonne_AUTO_Val)) 'Trim(Colonne_AUTO_Val)  
           valeur_donne =DataTable.GetSheet("Sheet_DONNEES").GetParameter(entete_donne)
           
           'Modifier la valeur dans le Sheet actuel
           debut_valeur_donne = Mid(valeur_donne,1,1)
           If debut_valeur_donne = "0" Then
'           	valeur_donne = "'" & valeur_donne      
		valeur_donne = Chr(39) & valeur_donne
           End If
           
           If filiale_existe <> 1 Then
           
           		 If (Colonne_AUTO_Val = "UserCbconseve") or (Colonne_AUTO_Val = "Utilisateur") Then
		   		 
		   		 	If Colonne_AUTO_Val = "UserCbconseve" Then
							
							'Verification du programme de consultation d'évènement
							Reporter.ReportEvent micDone, ">> -- Test de verification du programme à exécuter",  "Test"	
							If programme_Execute = "cbconseve" Then
								DataTable (Colonne_AUTO_Val, dtLocalSheet) = "" 'userInfoConfig(2)
								Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"	
								
							Else 
								DataTable (Colonne_AUTO_Val, dtLocalSheet) = userInfoConfig(2)								
								Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"
								
							End If
							
					Else 
							
							'Mise à jour de paramètre UserCbconseve et Utilisateur selon le programme utilisé
							'Si programme oivalid alors aucune valeur à mettre (cas de validation pour un évènement déja crée)
							'Sinon il sagit d'un cas de création alors mettre à jour le paramètre avec le code utilisateur de l'utilisateur connecté					
							
							If programme_Execute = "oivalid" Then 'Pour un cas d evalidation
								DataTable (Colonne_AUTO_Val, dtLocalSheet) = "" 'userInfoConfig(2)
								
							Else 'Pour un cas de création
								DataTable (Colonne_AUTO_Val, dtLocalSheet) = userInfoConfig(2)
								
							End If
							Reporter.ReportEvent micDone, ">> -- Le programme à exécuter est: " & programme_Execute,  "Succes"
						End If
		   		 
				Else  
		   		 		DataTable (Colonne_AUTO_Val, dtLocalSheet) = valeur_donne
		    		End If
           Else 
            		DataTable (Colonne_AUTO_Val, dtLocalSheet) = valeur_donne
           End If
           
          
          Reporter.ReportEvent micPass, ">> ------ Colone : " & entete_donne & ", Valorisée avec : " & valeur_donne & "",  "success"
      End If
Next

'Marquer dans le fichier le numero de la ligne utilisée
nb_debut_traitF = nb_debut_trait +1
  Set ressource_file_nbr_ecrF = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 2, true)
      ressource_file_nbr_ecrF.Write(nb_debut_traitF)
      ressource_file_nbr_ecrF.Close  
  
  
  'Marquer qu'iln y  a pas de lignespour la filiale 
           Exit for
            'Else
		    'Reporter.ReportEvent micFail, ">> -- KO Ligne de donnees non retrouvee dans le Sheet du cas de test",  "echec"
		
	
		End If
		
		DataTable.GetSheet("Local").SetNextRow
	Next 
  
    If traiter_keh = 0 Then
    	Reporter.ReportEvent micFail, ">> -- KO Ligne de donnees non retrouvee dans le Sheet du cas de test",  "echec"    	
    End If
  
  
 Else
   ' Toutes les lignes du fichier ont été exécutées
       Reporter.ReportEvent micFail, ">> -- KO Non Existence de lignes non encore executée",  "echec"
       Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
       
       Fichier_KO_JDD("test KO car toutes les lignes du fichier de données ont été dejé exécutées")        
	 
   EndTest micFail, "test KO car toutes les lignes du fichier de données ont été dejé exécutées", "echec"   
  End If
  
  Else
   ' Le fichier contient pas de lignes de données
'       Reporter.ReportEvent micFail, ">> -- KO Non Existence des donnes et/ou des entetes dans le fichier de donnees",  "echec"
	 Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
       Reporter.ReportEvent micFail, ">> -- KO Non Existence des donnes et/ou des entetes dans le fichier de donnees",  "echec"  
	
	Fichier_KO_JDD("test KO car le fichier de donnees ne contient pas de lignes de donnees ou d'entete")

   	EndTest micFail, "test KO car le fichier de donnees ne contient pas de lignes de donnees ou d'entete", "echec"
'   EndTest 3, "test KO car le fichier de donnees ne contient pas de lignes de donnees ou d'entete", "echec"
  End If

Else
    '"Le fichier n'existe pas."
     Reporter.ReportEvent micPass, ">> -- KO Non Existence du fichier de donnees",  "echec"
     Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
     
     Fichier_KO_JDD("test KO car le fichier de donnees n existe pas dans le repertoire")
     
    EndTest micFail, "test KO car le fichier de donnees n existe pas dans le repertoire", "echec"
'    EndTest micDone, "test KO car le fichier de donnees n existe pas dans le repertoire", "echec"
End If


Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
End Function


'Fonction User_Info_Config
'Role : Permet de récupérer les information de l'utilisateur qui exécute le cas de test
'Crée le 01/09/2022
'Par @Ousmane SANGARE
'Modifié le //
'Description modification : 
Public Function User_Info_Config(filiale_reelle)
	
	Reporter.ReportEvent micPass, "*** Debut de l'algorithme de recherche du fichier a utiliser pour la valorisation",  "success"

	Set Shell = CreateObject("wscript.Shell") 
	Dim fso, fso2, txt2
	Set fso = CreateObject("Scripting.FileSystemObject")
	
	'Recuperer le nom de la machine
	Set Shell = CreateObject("wscript.Shell") 
	Set env = Shell.Environment("Process")
	nom_hote = env.Item("Computername")
	Set Shell = Nothing
	Set env = Nothing
	testeur = Mid(nom_hote,1,2)
	
	
	'Recuperer la filiale qui est parametrée
	'Set env = Shell.Environment("Process")
		
		'strComputer = env.Item("Computername")
		
		'Environment.Value("Computer_Execute") = strComputer
		
		Dim path
		path = "[ALM\Resources] Resources\FichierParametre\PC\"&nom_hote
		path2 = "[ALM\Resources] Resources\FichierParametre\config\folder_config"
		'path3 = "[ALM\Resources] Resources\FichierParametre\config\files_config"
		'DataTable.ImportSheet path, "Feuil1", "Sheet_ACTION_PRINCIPALE" '"ACTION_PRINCIPALE"
		
		'MsgBox path
		'ver = DataTable.Value("version", "Sheet_ACTION_PRINCIPALE") 'Version
		
	       testname = Environment("TestName")
	       'Msgbox testname
	      ' VAL_TEST = Replace(testname , "[1]", "")
	       'VAL_TEST = Mid(testname,1,30)
	       VAL_TEST = testname
	
	       Set sheet_useV1 = DataTable.AddSheet("Sheet_DONNEES_V1") 
	       sheetV1 = sheet_useV1.Name  
	       DataTable.ImportSheet path, "Feuil1", sheetV1 
	       fil_param = DataTable.Value("filiale", "Sheet_DONNEES_V1")   'Filiale
	       
	       'MsgBox fil_param
	       
	       Set sheet_useV2 = DataTable.AddSheet("Sheet_DONNEES_V2") 
	       sheetV2 = sheet_useV2.Name  
	       DataTable.ImportSheet path2, "Feuil1", sheetV2 
	       
	
	        Lignes_donnes=DataTable.GetSheet("Sheet_DONNEES_V2").GetRowCount
	        
	        For Iterator = 1 To Lignes_donnes
	        DataTable.GetSheet("Sheet_DONNEES_V2").SetCurrentRow(Iterator)
	         fil_reel = DataTable.Value("filiale", "Sheet_DONNEES_V2") 
	         'MsgBox fil_reel
	        	If fil_reel =  fil_param Then
	        	          'DataTable.GetSheet("Sheet_DONNEES").SetCurrentRow(nb_debut_trait) 	          	  
	        	      If testeur = "FR" Then
		                        Rep_config = DataTable.Value("rep_vdi", "Sheet_DONNEES_V2")  
		                        nom_file_config =  "C:\file_config.txt"
		                        'strFileName = "C:\Data\file_config.xlsx"
		                         strFileName = "\\eur\GroupDir\SGCorp\FR\IBFS-ATOS-TF\CONFIGURATION\User_Config.xlsx" 
	                    Else
	                              Rep_config = DataTable.Value("rep_local", "Sheet_DONNEES_V2")  
	                              nom_file_config =  "D:\file_config.txt"
	                              'strFileName = "D:\Data\file_config.xlsx"
	                               strFileName = "S:\CSMSI_INTEGRATION\AUTOMATISATION_DES_TESTS\PRODUCTION\CONFIGURATION\User_Config.xlsx"
	                          
	                     End If
	        	    	  
	        	    Exit For
	        	End If       
	          Next
	        
	        
	        ''' debut
	         Suite_data = ""
	         Valeur_retrouve_script = 0
	        'strFileName = "E:\UFT_WorkSpace\TestData\TestExcelFile.xlsx"
	        'strFileName ="C:\Users\Ioloyede021120\Documents\File_cas_ALM.xlsx"
	        ' strFileName = "\\Client\D$\Data\file_config.xlsx"
	         'strFileName = "D:\Data\file_config.xlsx"
	         Dim objCon, objRecSet
	          Dim id
	          'Create an ADODB connection
	          Set objCon= CreateObject("ADODB.Connection")
	          Set objRecSet = CreateObject("ADODB.Recordset")
	          'Open connection
	objCon.Open "DRIVER={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=" & strFileName & ";Readonly=False"
	'Check if Error then Exit Function
	If Err <> 0 Then
	  Reporter.ReportEvent micFail, "Create Connection", "Error occurred while opening Connection. Error : " & Err
	  ExitTest
	End If
	
	'Execute SQL and store results in reocrdset
	filiale_r = filiale_reelle
	
	If testeur = "FR" Then
		strSQL = "Select * from [USER_INFOS$] WHERE FILIALE = " & "'" & filiale_r & "'" & " AND VDI_NAME =  " & "'" & nom_hote & "'" ' Provide the Sheet name of Excel File and append $ symbol at the End of it.
	Else 
		strSQL = "Select * from [USER_INFOS$] WHERE FILIALE = " & "'" & filiale_r & "'" & " AND  LOCAL_NAME = " & "'" & nom_hote & "'"  ' Provide the Sheet name of Excel File and append $ symbol at the End of it.
	End If
	
	objRecSet.Open strSQL, objCon,3
	colunCount = objRecSet.Fields.Count ' compter le nombre de colonne
	rowCount = objRecSet.RecordCount ' compter le nombre de ligne
	
	
	If rowCount > 0 Then
'	       colunCount = Cint(colunCount)-1
		Dim tableauUserInfo(3) 
		
	While objRecSet.EOF = False
	    For i = 1 To  rowCount
	           'For j = 1 To colunCount 
	           
	'           	MsgBox objRecSet.Fields(1)
	'           	id =objRecSet.Fields(1)
	              'MsgBox objRecSet.Fields("FILE")'You can also mention the column rather than using Index of Column
'	              Suite_data = objRecSet.Fields("FILE")
			tableauUserInfo(0) = trim(objRecSet.Fields("LOCAL_NAME"))   'nom de la machine locale
			tableauUserInfo(1) = trim(objRecSet.Fields("VDI_NAME"))       'nom de la machine virtuelle
			tableauUserInfo(2) = trim(objRecSet.Fields("USER_NAME"))    'Code utilisateur pour la filiale
			tableauUserInfo(3) = trim(objRecSet.Fields("AUTO"))               'Nom automaticien
	              Valeur_retrouve_script = 1

	             objRecSet.moveNext
	             ' MsgBox i
	             
	       Next
	 
	Wend
	
	End If
	
	
	If Err <> 0 Then
	     Reporter.ReportEvent micFail, "Open Recordset", "Error has occured while reading data.Error Code : " & Err
	     ExitTest
	End If
	'Close and Discard all variables
	Set objRecSet= Nothing
	objCon.Close
	Set objCon = Nothing
	  
	
	If Valeur_retrouve_script = 1 Then
	 File_final_config = Rep_config & "\" & Suite_data
	 
	Reporter.ReportEvent micPass, "*** Le code utilisateur à utiliser est : " & tableauUserInfo(2),  "success"
	
	Else
	 File_final_config = "Code utilisateur automaticien inexistant"
	 
	Reporter.ReportEvent micFailed, "*** Aucun utilisateur automaticien correspond à cette machine ",  "echec"
	End If
	 
	Reporter.ReportEvent micPass, "*** Fin de l'algorithme de recherche du code utilisateur à utiliser pour la valorisation",  "success"
	
	User_Info_Config =  tableauUserInfo
	
End Function


'Fonction Lister cas KO GD
'Role : Permet de lister les cas de test dont le statut KO est lié aux données fournir par les GD
'Crée le 11/08/2022
'Par @Ousmane SANGARE
'Modifié le //
'Description modification : Prise en compte des KO non fonctionnel. KO liés aux fichier de données
Function Fichier_KO_JDD(detail_KO)
	'Declaration variable pour fichier de sorrie des cas KO fichier vide
Dim rep_Local
Dim rep_Vdi

Set Shell = CreateObject("wscript.Shell") 
Set env = Shell.Environment("Process")
strComputer = env.Item("Computername")
debut_Host = Mid(strComputer,1,2)
Set env = Nothing
Set Shell = Nothing

testName = Environment("TestName")
heure_file = day(now) & "-" & month(now) & "-" & year(now)
cas_fichier_inexistant = strComputer & "_Liste_KO_donnees_" & heure_file & ".csv"
rep_Local = "S:\CSMSI_INTEGRATION\AUTOMATISATION_DES_TESTS\PRODUCTION\EVIDENCES\CAS_KO_FICHIER_VIDE\" & cas_fichier_inexistant
rep_Vdi = "\\eur\GroupDir\SGCorp\FR\IBFS-ATOS-TF\EVIDENCES\CAS_KO_FICHIER_VIDE\" & cas_fichier_inexistant
chaine_KO = ""

Set ressource_global_file = CreateObject("Scripting.FileSystemObject")

	'Creation du fichier de sortie pour les cas KO pour raison de fichier de donnée vide ou nombre de colonnes > 50
	 If debut_Host = "MP" Then	'Exécution du cas sur la mahine Locale
	 
		'Vérification de l'existance du fichier de sortie	 
		If ressource_global_file.FileExists(rep_Local) Then		
			chaine_KO = testName & ";" & detail_KO
			Set ressource_file = ressource_global_file.OpenTextFile(rep_Local,8,False)
			ressource_file.WriteLine(chaine_KO)
			chaine_KO = ""
			
		Else 
			Set ressource_file = ressource_global_file.OpenTextFile(rep_Local,2,true)
			chaine_KO = "TEST_NAME;DETAIL KO"
			ressource_file.WriteLine(chaine_KO)
			wait 1
			
			chaine_KO = testName & ";" & detail_KO
			ressource_file.WriteLine(chaine_KO)
			chaine_KO = ""
		End If
		
	Else 'Exécution du cas sur la VDI
	
		If ressource_global_file.FileExists(rep_Vdi) Then
			chaine_KO = testName & ";" & detail_KO
			Set ressource_file = ressource_global_file.OpenTextFile(rep_Vdi,8,False)
			ressource_file.WriteLine(chaine_KO)
			chaine_KO = ""
			
		Else 
			Set ressource_file = ressource_global_file.OpenTextFile(rep_Vdi,2,true)
			chaine_KO = "TEST_NAME;DETAIL KO"
			ressource_file.WriteLine(chaine_KO)
			wait 1
			
			chaine_KO = testName & ";" & detail_KO
			ressource_file.WriteLine(chaine_KO)
			chaine_KO = ""
		End If	
	 End If
	 Set ressource_file = Nothing
	 
End Function



Function Fichier_Data_A_Lire()


Reporter.ReportEvent micPass, "*** Debut de l'algorithme de recherche du fichier a utiliser pour la valorisation",  "success"

Set Shell = CreateObject("wscript.Shell") 
Dim fso, fso2, txt2
Set fso = CreateObject("Scripting.FileSystemObject")

'Recuperer le nom de la machine
Set Shell = CreateObject("wscript.Shell") 
Set env = Shell.Environment("Process")
nom_hote = env.Item("Computername")
Set Shell = Nothing
Set env = Nothing
testeur = Mid(nom_hote,1,2)


'Recuperer la filiale qui est parametrée
'Set env = Shell.Environment("Process")
	
	'strComputer = env.Item("Computername")
	
	'Environment.Value("Computer_Execute") = strComputer
	
	Dim path
	path = "[ALM\Resources] Resources\FichierParametre\PC\"&nom_hote
	path2 = "[ALM\Resources] Resources\FichierParametre\config\folder_config"
	'path3 = "[ALM\Resources] Resources\FichierParametre\config\files_config"
	'DataTable.ImportSheet path, "Feuil1", "Sheet_ACTION_PRINCIPALE" '"ACTION_PRINCIPALE"
	
	'MsgBox path
	'ver = DataTable.Value("version", "Sheet_ACTION_PRINCIPALE") 'Version
	
       testname = Environment("TestName")
       'Msgbox testname
      ' VAL_TEST = Replace(testname , "[1]", "")
       'VAL_TEST = Mid(testname,1,30)
       VAL_TEST = trim(testname)

       Set sheet_useV1 = DataTable.AddSheet("Sheet_DONNEES_V1") 
       sheetV1 = sheet_useV1.Name  
       DataTable.ImportSheet path, "Feuil1", sheetV1 
       fil_param = DataTable.Value("filiale", "Sheet_DONNEES_V1")   'Filiale
       
       'MsgBox fil_param
       
       Set sheet_useV2 = DataTable.AddSheet("Sheet_DONNEES_V2") 
       sheetV2 = sheet_useV2.Name  
       DataTable.ImportSheet path2, "Feuil1", sheetV2 
       
       'Set sheet_useV3 = DataTable.AddSheet("Sheet_DONNEES_V3") 
       'sheetV3 = sheet_useV3.Name  
       'DataTable.ImportSheet path3, "Feuil1", sheetV3
       
       'fil_param = DataTable.Value("version", "Sheet_DONNEES_V2")   'Filiale

        Lignes_donnes=DataTable.GetSheet("Sheet_DONNEES_V2").GetRowCount
        
        For Iterator = 1 To Lignes_donnes
        DataTable.GetSheet("Sheet_DONNEES_V2").SetCurrentRow(Iterator)
         fil_reel = DataTable.Value("filiale", "Sheet_DONNEES_V2") 
         'MsgBox fil_reel
        	If fil_reel =  fil_param Then
        	          'DataTable.GetSheet("Sheet_DONNEES").SetCurrentRow(nb_debut_trait) 	          	  
        	      If testeur = "FR" Then
	                        Rep_config = DataTable.Value("rep_vdi", "Sheet_DONNEES_V2")  
	                        nom_file_config =  "C:\file_config.txt"
	                        'strFileName = "C:\Data\file_config.xlsx"
	                         strFileName = "\\eur\GroupDir\SGCorp\FR\IBFS-ATOS-TF\CONFIGURATION\file_config.xlsx" 
'	                         strFileName = "[ALM\Resources] Resources\FichierParametre\config\files_config\file_config.xlsx"
                    Else
                              Rep_config = DataTable.Value("rep_local", "Sheet_DONNEES_V2")  
                              nom_file_config =  "D:\file_config.txt"
                              'strFileName = "D:\Data\file_config.xlsx"
                               strFileName = "S:\CSMSI_INTEGRATION\AUTOMATISATION_DES_TESTS\PRODUCTION\CONFIGURATION\file_config.xlsx"
                          
                     End If
        	    	  
        	    Exit For
        	End If       
          Next
        
        
        ''' debut
         Suite_data = ""
         Valeur_retrouve_script = 0
        'strFileName = "E:\UFT_WorkSpace\TestData\TestExcelFile.xlsx"
        'strFileName ="C:\Users\Ioloyede021120\Documents\File_cas_ALM.xlsx"
        ' strFileName = "\\Client\D$\Data\file_config.xlsx"
         'strFileName = "D:\Data\file_config.xlsx"
         Dim objCon, objRecSet
          Dim id
          'Create an ADODB connection
          Set objCon= CreateObject("ADODB.Connection")
          Set objRecSet = CreateObject("ADODB.Recordset")
          'Open connection
objCon.Open "DRIVER={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ=" & strFileName & ";Readonly=False"
'Check if Error then Exit Function
If Err <> 0 Then
  Reporter.ReportEvent micFail, "Create Connection", "Error occurred while opening Connection. Error : " & Err
  ExitTest
End If
'chaine = "GEN-ETA-LAN-EDI-005_Editer l'etat des créances immobilisées, douteuses ou contentieuses"
'Execute SQL and store results in reocrdset
'strSQL = "Select NAME_CAS,FILE   from [Feuil1$] WHERE NAME_CAS like '%" & VAL_TEST & "%' " ' Provide the Sheet name of Excel File and append $ symbol at the End of it.
strSQL = "Select NAME_CAS,FILE   from [Feuil1$] WHERE trim(NAME_CAS) =" & "'" & VAL_TEST & "'" '"  ' Provide the Sheet name of Excel File and append $ symbol at the End of it.
objRecSet.Open strSQL, objCon,3
colunCount = objRecSet.Fields.Count ' compter le nombre de colonne
rowCount = objRecSet.RecordCount ' compter le nombre de ligne

'lastrowCount = objRecSet.MoveLast
'	MsgBox colunCount
 'MsgBox rowCount
'MsgBox lastrowCount

If rowCount > 0 Then
	
While objRecSet.EOF = False
    For i = 1 To  rowCount
           'For j = 1 To colunCount 
           
'           	MsgBox objRecSet.Fields(1)
'           	id =objRecSet.Fields(1)
              'MsgBox objRecSet.Fields("FILE")'You can also mention the column rather than using Index of Column
              Suite_data = objRecSet.Fields("FILE")
              Valeur_retrouve_script = 1
'                MsgBox objRecSet.Fields("AGE")
           'Next
           'objCon.Execute "Update [Feuil1$] set STATUT='OK' where ID="&id
             objRecSet.moveNext
             ' MsgBox i
             
       Next
 
Wend

End If


If Err <> 0 Then
     Reporter.ReportEvent micFail, "Open Recordset", "Error has occured while reading data.Error Code : " & Err
     ExitTest
End If
'Close and Discard all variables
Set objRecSet= Nothing
objCon.Close
Set objCon = Nothing
  

If Valeur_retrouve_script = 1 Then
 File_final_config = Rep_config & "\" & Suite_data
 
Reporter.ReportEvent micPass, "*** Fichier a utiliser est : " & File_final_config,  "success"

Else
 File_final_config = "Script inexistant dans le parametrage"
 
Reporter.ReportEvent micFailed, "*** Aucun fichier correspondant a ce script de cas de tests ",  "echec"
End If
 
'MsgBox File_final_config

'Recuperer le nom du fichier




'Set Txt = Fso.OpenTextFile( Rep_config	, 1)





Reporter.ReportEvent micPass, "*** Fin de l'algorithme de recherche du fichier a utiliser pour la valorisation",  "success"

Fichier_Data_A_Lire =  File_final_config


End Function






'Fonction Valorisation automatique des scripts
'Role : Permet de valoriser automatiquement les scripts a partir de jeux de données excel fourni par les GD
'Crée le 17/05/2022
'Modifié le 24/05/2022
'Par @Ristide DEGBEU
Function Valorisation_automatique_VRAI()
Reporter.ReportEvent micPass, "*** Debut de la valorisation du cas de test",  "success"
'Declaration des variables
Dim nbColonneAUT, nbColonneGD, tot, Colonne_GD(), Colonne_AUT()
Dim path, sheet, nom_complet_file, nom_complet, nom_complet_file_nbr, folder, nb_debut_trait, nb_debut_traitF, Lignes_donnes

'Recuperation des parametres du fichier a utiliser
Reporter.ReportEvent micPass, ">> Recuperation de la localisation et du nom du fichier de donnees ",  "success"
'path = DataTable ("NomFichier", dtGlobalSheet)
'folder = DataTable ("repertoire", dtGlobalSheet)
'path = "[ALM\Resources] Resources\FichierParametre\Aborescence_"&filiale 

'Fichier_Data_A_Lire


'Recuperation de la dernière ligne du fichier utilisé
'nom_complet_file_nbr =  folder & path & ".txt"
'nom_complet =  folder & path & ".xlsx"
nom_complet_BIG =  Fichier_Data_A_Lire
nom_complet =  nom_complet_BIG & ".xlsx"
nom_complet_file_nbr =   nom_complet_BIG & ".txt"
Set ressource_global_file = CreateObject("Scripting.FileSystemObject")

Reporter.ReportEvent micPass, ">> Recuperation de la dernière ligne du  fichier de donnees qui a ete executee",  "success"
' Si le fichier de données existe
Reporter.ReportEvent micPass, ">> Test de la presence du fichier de donnees dans le repertoire",  "success"
If ressource_global_file.FileExists(nom_complet ) Then
    '"Le fichier existe." 
    Reporter.ReportEvent micPass, ">> -- Existence du fichier de donnees",  "success"
    'Création du Sheet temporaire
  Set sheet_use = DataTable.AddSheet("Sheet_DONNEES") 
  
'Recuperation du fichier a mettre dans un Sheet Temporaire
sheet = sheet_use.Name 
DataTable.ImportSheet nom_complet, "Feuil1", sheet 

    'Si le ichier de données est vide [ Contient qu'une seule ligne]
    Reporter.ReportEvent micPass, ">> Test si le fichier de donnees contient des lignes de donnees et des entetes",  "success"
    Lignes_donnes=DataTable.GetSheet("Sheet_DONNEES").GetRowCount
    If  Lignes_donnes > 1 Then
     ' Fichier contient plus de Une ligne
     Reporter.ReportEvent micPass, ">> -- Existence des donnes et des entetes dans le fichier de donnees",  "success"
	 
'Creation si non existant du fichier qui compte les donnes traitées
If ressource_global_file.FileExists(nom_complet_file_nbr ) Then
    '"Le fichier existe." 
Else
    '"Le fichier n'existe pas."
    Set ressource_file_nbr_ecr = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 2, true)
      ressource_file_nbr_ecr.Write(1)
      ressource_file_nbr_ecr.Close	    
End If

 Set ressource_file_nbr_lec = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 1)
 nb_debut_trait = ressource_file_nbr_lec.ReadAll
 nb_debut_trait = trim (nb_debut_trait) 
 
 Reporter.ReportEvent micPass, ">> Test si toutes les lignes du fichier ne sont pas encore executees",  "success"
 
 Lignes_donnes = CInt(Lignes_donnes) 
 nb_debut_trait = CInt(nb_debut_trait)
 
 If   Lignes_donnes >= nb_debut_trait then
  Reporter.ReportEvent micPass, ">> -- Existence des lignes de donnees non encore executees",  "success"
   
'Recuperation des colonnes de chaque Sheet
Reporter.ReportEvent micPass, ">> Recuperation des colonnes de chaque Sheet",  "success"
nbColonneGD=DataTable.GetSheet("Sheet_DONNEES").GetParameterCount
nbColonneAUT = DataTable.GetSheet("Local").GetParameterCount

ReDim Preserve Colonne_GD(50)
ReDim Preserve Colonne_AUT(50)

For i=1 to nbColonneGD
Colonne_GD(i) = DataTable.GetSheet("Sheet_DONNEES").GetParameter(i).Name
Next

For i=1 to nbColonneAUT
Colonne_AUT(i) = DataTable.GetSheet("Local").GetParameter(i).Name
Next

'Mise à jour des colonnes
Reporter.ReportEvent micPass, ">> Mise à jour des colonnes dans le cas de test",  "success"
DataTable.GetSheet("Sheet_DONNEES").SetCurrentRow(nb_debut_trait)
For i=1 to nbColonneGD
   valeur_existe = 0

       For j=1 to nbColonneAUT
          
            If trim(Colonne_GD(i))  = trim(Colonne_AUT(j)) Then
         		valeur_existe = 1		
     	    End If
    
        Next
        If  valeur_existe = 1 Then
           entete_donne = Colonne_GD(i) 
           valeur_donne =DataTable.GetSheet("Sheet_DONNEES").GetParameter(entete_donne)
           
           'Modifier la valeur dans le Sheet actuel
          DataTable (entete_donne, dtLocalSheet) = valeur_donne
          Reporter.ReportEvent micPass, ">> ------ Colone : " & entete_donne & ", Valorisée avec : " & valeur_donne & "",  "success"
      End If
Next

'Marquer dans le fichier le numero de la ligne utilisée
nb_debut_traitF = nb_debut_trait +1
  Set ressource_file_nbr_ecrF = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 2, true)
      ressource_file_nbr_ecrF.Write(nb_debut_traitF)
      ressource_file_nbr_ecrF.Close  
  
 Else
   ' Toutes les lignes du fichier ont été exécutées
       Reporter.ReportEvent micFail, ">> -- KO Non Existence de lignes non encore executée",  "echec"
       Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
   EndTest micFail, "test KO car toutes les lignes du fichier de données ont été dejé exécutées", "echec"
  End If
  Else
   ' Le fichier contient pas de lignes de données
       Reporter.ReportEvent micFail, ">> -- KO Non Existence des donnes et/ou des entetes dans le fichier de donnees",  "echec"
       Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
   EndTest micFail, "test KO car le fichier de donnees ne contient pas de lignes de donnees ou d'entete", "echec"
  End If

Else
    '"Le fichier n'existe pas."
     Reporter.ReportEvent micPass, ">> -- KO Non Existence du fichier de donnees",  "echec"
     Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
    EndTest micFail, "test KO car le fichier de donnees n existe pas dans le repertoire", "echec"
End If


Reporter.ReportEvent micPass, "*** Fin de la valorisation du cas de test",  "success"
End Function


'@Fonction lecture nom VDI
'@Description : La methode permet de vérifier le nom de la machine qui exécute le cas de test afin d'utiliser ou pas la methode de valorisation automatique
'@Date creation : 22/09/2022
'@Auteur : Ousmane SANGARE
'@Date modification : 
'@Description modification :
Public Function verifierNomHote()
	Set Shell = CreateObject("wscript.Shell") 
	Set env = Shell.Environment("Process")
	strComputer = env.Item("Computername")
	
	debut_name = Mid(strComputer,1,2)
	
	DataTable.AddSheet "liste_VDI"
	sheet_nameVDI = DataTable.GetSheet("liste_VDI").Name
	pathNameVDI = "[ALM\Resources] Resources\FichierParametre\config\name_vdi"
	DataTable.ImportSheet pathNameVDI, 1, sheet_nameVDI
	
	If debut_name = "FR" Then
		listeVDI = DataTable.GetSheet(sheet_nameVDI).GetParameter("VDI").Value
	Else 
		listeVDI = DataTable.GetSheet(sheet_nameVDI).GetParameter("LOCALE").Value
	End If
	
	
	tableauVDI = Split(listeVDI,"|")
	nbLignesVDI = UBound(tableauVDI)
	
	 vdi_utilise = 0
	for i=0 to nbLignesVDI     
	      vdi_temp = trim(tableauVDI(i))
		if strComputer = vdi_temp then
			vdi_utilise = 1
			Exit for
		Else 
			'>>>> RAS; suivant
		End If
	Next
	
	If vdi_utilise = 1 Then
		Valorisation_automatique
	Else 
		' >>>> RAS; la VDI n'est pas utilise pour la valo auto
	End If
End Function


Function Recup_Programme()

'------Recuperation du nom des programmes------'
	 Set Shell = CreateObject("wscript.Shell") 
	Set env = Shell.Environment("Process")
	strComputer = env.Item("Computername")
	    
	If (strComputer = "FR09540422W" )Then	   		
	   		       TestName = ""&QCUtil.CurrentTest.Name
	   			nom_file = strComputer
				'nom_complet_file_nbr =  "D:\New folder\" & nom_file & ".csv" 
				nom_complet_file_nbr =  "\\Client\D$\New folder\" & nom_file & ".csv" 
				
				Set ressource_global_file = CreateObject("Scripting.FileSystemObject")
			
				If(NOT ressource_global_file.FileExists (nom_complet_file_nbr))Then
					Set ressource_file = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 2, true)
					chaine_rapport = "Cas de Test;Nom du programme"
					ressource_file.WriteLine(chaine_rapport)
					wait 1
					ressource_file.WriteLine(TestName&";"&DataTable.Value("programme", "Global"))
					
					EndTest micPass, TestName, "succés"
				Else 
					Set ressource_file = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 8, false) 'Open a file and write to the end of the file.
					ressource_file.WriteLine(TestName&";"&DataTable.Value("programme", "Global"))
					
					EndTest micPass, TestName, "succés"
					
				End If
	End If
	  '-----------Fin recuperation---------------------------'
	End Function  
	 
	 
	 
Function A(nombre)

'------Recuperation du nom des programmes------'
	 Set Shell = CreateObject("wscript.Shell") 
	Set env = Shell.Environment("Process")
	strComputer = env.Item("Computername")
	    
	If (strComputer = "FR09540422W" )Then	   		
	   		       TestName = ""&QCUtil.CurrentTest.Name
	   			nom_file = strComputer
				'nom_complet_file_nbr =  "D:\New folder\" & nom_file & ".csv" 
				nom_complet_file_nbr =  "\\Client\D$\New folder\" & nom_file & ".csv" 
				
				Set ressource_global_file = CreateObject("Scripting.FileSystemObject")
			
				If(NOT ressource_global_file.FileExists (nom_complet_file_nbr))Then
					Set ressource_file = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 2, true)
					chaine_rapport = "Cas de Test;Nom du programme"
					ressource_file.WriteLine(chaine_rapport)
					wait 1
					ressource_file.WriteLine(TestName&";"&DataTable.Value("programme", "Global"))
					
					EndTest micPass, TestName, "succés"
				Else 
					Set ressource_file = ressource_global_file.OpenTextFile(nom_complet_file_nbr, 8, false) 'Open a file and write to the end of the file.
					ressource_file.WriteLine(TestName&";"&DataTable.Value("programme", "Global"))
					
					EndTest micPass, TestName, "succés"
					
				End If
	End If
	  '-----------Fin recuperation---------------------------'
	End Function  
	  
